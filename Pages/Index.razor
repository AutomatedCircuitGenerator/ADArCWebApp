@page "/"
@inject IJSRuntime JsRuntime

<PageTitle>Index</PageTitle>

<body>
	<script>
		window.triggerClick = (elt) => elt.click();
	</script>
	<script suppress-error="BL9992" type="module" src="build/build.js"></script>
	<button @ref="refresh" hidden="hidden" @onclick="StateChanged">refresh</button>

	<div class="page">
		<div class="toolbar">
			<span class="adarc-text">ADArC</span>
			<div class="center-toolbar">
				<button class="toolbar-button">
					<img src="save-icon.png" alt="Save Icon">
					<span>Save</span>
				</button>
				<button class="toolbar-button">
					<img src="help-icon.png" alt="Help Icon">
					<span>Help</span>
				</button>
				<button class="toolbar-button" @onclick="ToggleRunStop">
					<img src="@runStopIcon" alt="@runStopText">
					<span>@runStopText</span>
				</button>
			</div>
		</div>

		<div class="page-content">
			<div class="sidebar" style="width: 25%; left: @(leftPaneAlign+"%")">
				<div class="expand-button expand-button-left" @onclick="ToggleLeftSidebar" style="left:100%;"></div>
				<ComponentPane></ComponentPane>
			</div>

			<div class="sidebar-right" style="width: 40%; right: @(rightPaneAlign+"%")">
				<div class="expand-button expand-button-right" @onclick="ToggleRightSidebar" style="right:100%;"></div>
				<CodePane></CodePane>
			</div>
		</div>
	</div>
</body>


@code{
	bool isLeftExpanded = true;
	bool isRightExpanded = false;
	int leftPaneAlign => isLeftExpanded ? 0 : -23;
	int rightPaneAlign => isRightExpanded ? 0 : -37;
	string runStopIcon => isRunning ? "stop-icon.png" : "run-icon.png";
	string runStopText => isRunning ? "Stop" : "Run";
	bool isRunning = false;

	void ToggleLeftSidebar()
	{
		isLeftExpanded = !isLeftExpanded;
		isRightExpanded = false;
	}

	void ToggleRightSidebar()
	{
		isRightExpanded = !isRightExpanded;
		isLeftExpanded = false;
	}
	void ToggleRunStop()
	{
		isRunning = !isRunning;
	}

	public Index()
	{
		app = this;
	}

	public void StateChanged()
	{
		StateHasChanged();	
	}

	async Task triggerRender()
	{
		await JsRuntime.InvokeAsync<object>("triggerClick", refresh);
	}

	public static bool value;
	public static Index? app;

	public static ElementReference? refresh;

	[JSInvokable]
	public static async void updVal(bool nVal)
	{


		Index.value = nVal;
		await app.triggerRender();
	}

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var module = await JsRuntime.InvokeAsync<IJSObjectReference>("interopManager.getInteropManager");
			await module.InvokeVoidAsync("startCodeLoop", DotNetObjectReference.Create(this));

			
		}
	}

}