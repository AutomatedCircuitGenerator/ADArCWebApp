@page "/"
@inject IJSRuntime JsRuntime

<PageTitle>Index</PageTitle>

<body>
	<script>
		window.triggerClick = (elt) => elt.click();
	</script>
	<script suppress-error="BL9992" type="module" src="build/build.js"></script>
	<button @ref="refresh" hidden="hidden" @onclick="StateChanged">refresh</button>
	<div class="page">
		<div class="toolbar">
			<span class="adarc-text">ADArC</span>
			<div class="center-toolbar">
				<button class="toolbar-button">
					<img src="save-icon.png" alt="Save Icon">
					<span>Save</span>
				</button>
				<button class="toolbar-button">
					<img src="help-icon.png" alt="Help Icon">
					<span>Help</span>
				</button>
				<button class="toolbar-button" @onclick="ToggleRunStop">
					<img src="@runStopIcon" alt="@runStopText">
					<span>@runStopText</span>
				</button>
			</div>
		</div>

		<div class="page-content" @onmousedown="checkForCardDrag" @onmousemove="dragCardIfPossible" @onmouseup="addToCanvasIfNecessary">
			<div class="main-canvas">
				<MainCanvas comps=@(comps)></MainCanvas>
			</div>
			<div class="sidebar" style="width: 25%; left: @(leftPaneAlign+"%")">
				<div class="expand-button expand-button-left" @onclick="ToggleLeftSidebar" style="left:100%;"></div>
				<ComponentPane host="@this"></ComponentPane>
			</div>
			<div id="temp-dummy-moveable" style="position:absolute; top:@(moverOffsetTop+"px"); left:@(moverOffsetLeft+"px"); transform:translate(-50%, -50%); background-color:rgba(255,0,0,128); visibility:@isVisible; width:75px; height:75px;"></div>
			<div class="sidebar-right" style="width: 40%; right: @(rightPaneAlign+"%")">
				<div class="expand-button expand-button-right" @onclick="ToggleRightSidebar" style="right:100%;"></div>
				<CodePane></CodePane>
			</div>
		</div>
	</div>
</body>


@code{
	bool isLeftExpanded = true;
	bool isRightExpanded = false;
	int leftPaneAlign => isLeftExpanded ? 0 : -23;
	int rightPaneAlign => isRightExpanded ? 0 : -37;
	string runStopIcon => isRunning ? "stop-icon.png" : "run-icon.png";
	string runStopText => isRunning ? "Stop" : "Run";
	bool isRunning = false;

	void ToggleLeftSidebar()
	{
		isLeftExpanded = !isLeftExpanded;
		isRightExpanded = false;
	}

	void ToggleRightSidebar()
	{
		isRightExpanded = !isRightExpanded;
		isLeftExpanded = false;
	}
	void ToggleRunStop()
	{
		isRunning = !isRunning;
	}

	public Index()
	{
		app = this;
	}

	public void StateChanged()
	{
		Console.WriteLine("targetcardId " + app.targetCardComponentId);
		StateHasChanged();	
	}

	async Task triggerRender()
	{
		await JsRuntime.InvokeAsync<object>("triggerClick", refresh);
	}

	private int localIds = 0;

	public static Dictionary<int , ComponentInstance> comps = new() {
	};

	public static Index? app;

	public static ElementReference? refresh;

	[JSInvokable]
	public static async void sendVal(int localId, object data)
	{
		Index.comps[localId].mainValue = data;
		await app.triggerRender();
	}

	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var module = await JsRuntime.InvokeAsync<IJSObjectReference>("interopManager.getInteropManager");
			//await module.InvokeVoidAsync("startCodeLoop", DotNetObjectReference.Create(this));


		}
	}


	#region component pane integration
	private int targetCardComponentId = -1;
	private string isVisible = "hidden";

	private double moverOffsetTop = 0;
	private double moverOffsetLeft = 0;

	public void setTargetID(int id)
	{
		targetCardComponentId = id;
	}


	private void checkForCardDrag(MouseEventArgs e)
	{
		if (e.Button == 0 && targetCardComponentId != -1)
		{
			isVisible = "visible";
			moverOffsetLeft = e.ClientX;
			moverOffsetTop = e.ClientY;
		}
	}

	private void dragCardIfPossible(MouseEventArgs e)
	{
		if (targetCardComponentId != -1)
		{
			moverOffsetLeft = e.ClientX;
			moverOffsetTop = e.ClientY;
		}
	}

	private void addToCanvasIfNecessary(MouseEventArgs e)
	{
		if (targetCardComponentId != -1)
		{
			isVisible = "hidden";
			//TODO: add default value to component data declarations
			comps.Add(++localIds, new(targetCardComponentId, false, e.ClientX - 10, e.ClientY - 50));
			moverOffsetLeft = 0;
			moverOffsetTop = 0;
			targetCardComponentId = -1;
		}
	}
	#endregion

}