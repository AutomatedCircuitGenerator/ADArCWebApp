@page "/"
@using GraphSynth.Representation
@inject IJSRuntime JsRuntime
@inject NavigationManager navMan

<PageTitle>Index</PageTitle>
<body>
<script suppress-error="BL9992" type="module" src="build/build.js"></script>
<button @ref="refresh" hidden="hidden" @onclick="StateChanged">refresh</button>
<div class="page">
	<div class="toolbar">
		<div class="logo-and-adarc">
			<img class="logo" src="images/adarc-logo.001.png" alt="adarc-logo">
			<span class="adarc-text">ADArC</span>
		</div>
		<div class="tutorial-button" style="font-size: 18px" @onclick="ShowTutorial"> <!-- change -->
			<span>💡 Tutorial</span>
		</div>

		<!-- Disabling zoom for case study demo -->
		<!--
		<div class="zoom-bar-container">
			<button class="zoom-button" @onclick=() => HandleZoom("in")' style="font-size: 15px;">🔎</button>
			<button class="zoom-button" @onclick='() => HandleZoom("out")' style="font-size: 24px;">🔎</button>
		</div>
		-->
		<div class="center-toolbar" style="font-size: 18px">
			<button class="toolbar-button">
				<span>⬇️️ Import</span>
			</button>
			<button class="toolbar-button">
				<span>⬆️ Export</span>
			</button>
			<button class="toolbar-button" @onclick="OpenExternalHelp">
				<span>ℹ️ Help</span>
			</button>
			<button class="toolbar-button" @onclick="ToggleRunStop">
				<span>@runStopText</span>
			</button>
		</div>
	</div>


	<div class="page-content" @onmousedown="checkForCardDrag" @onmousemove="dragCardIfPossible" @onmouseup="addToCanvasIfNecessary">
		<div class="main-canvas" tabindex="0" @onkeydown="handleKeyPress">
			<MainCanvas comps=@(comps) handleMouseEnter="() => allowDrop = true" handleMouseLeave="() => allowDrop = false"></MainCanvas>
		</div>
		<div class="sidebar" style="width: 25%; left: @(leftPaneAlign + "%")">
			<div class="expand-button expand-button-left" @onclick="ToggleLeftSidebar" style="left:100%;">
				@if (isLeftExpanded)
				{
					<span>▶</span>
				}
				else
				{
					<span>◀</span>

				}
			</div>
			<ComponentPane host="@this"></ComponentPane>
		</div>
		
		<div id="mover" style="pointer-events:none; position:absolute; top:@(moverOffsetTop)px; left:@(moverOffsetLeft)px; transform:translate(-50%, -50%); visibility:@isVisible; width:@(ComponentDeclarations.components[moverID].rightOffset)px; height:@(ComponentDeclarations.components[moverID].bottomOffset)px;">
			<VaryingComponent disableBorder=true posAbolute="false" individualData="new(moverID, new(), 0, 0)" objId="@moverID" zoomFactor="buildCanvas?.zoomFactor == null ? 1 : buildCanvas.zoomFactor" DragStart="() => { }" DragProgress="() => { }" DragEnd="() => { }"></VaryingComponent>
		</div>
		<div class="sidebar-right" style="width: 40%; right: @(rightPaneAlign + "%")"> <!-- code panel -->
			<div class="expand-button expand-button-right" @onclick="ToggleRightSidebar" style="right:100%;">
				@if (isRightExpanded)
				{
					<span>▶</span>
				}
				else
				{
					<span>◀</span>
				}
			</div>
			<CodePane></CodePane>
		</div>
	</div>
	@if (showZoomTooltip) 
	{
		<div class="zoom-tooltip" style="background: #ece1be">
			<label>Use these buttons to zoom in and out of the Canvas.</label>
			<button @onclick="GotItClicked">Got it!</button>
		</div>
	}
	
	@if (loadingProgress == -1)
	{
		<div class="workbench-title">
			<span @onclick="showRightClickTooltipFn">💡 Workbench</span>
		</div>
	}
	@if (showRightClickTooltip) {
		<div class="right-click-tooltip" style="background: #ece1be">
			<label>This is the Workbench.</label>
			<label style="font-size: 13.5px">Right-click components dragged from the Component Pallete for environmental settings, information, and deletion. Each component added auto-generates code in the Code Panel, accessible by clicking the arrow icon on the right side of the screen.</label>
			<button @onclick="HideRightClickTooltip">Got it!</button>
		</div>
	}


</div>
<div class="progress-container" style="display: @(loadingProgress < 0 ? "none" : "block"); position: fixed; bottom: 50px; left: 50%; transform: translateX(-50%); width: 400px; height: 60px; padding: 25px; background-color: lightgray; border-radius: 10px;">
	<span style="display: inline-block; width: 100%; text-align: center; color: black; transform: translateY(-13px);">@(Math.Round(loadingProgress, 0))% component rules loaded</span>
	<div class="progress-bar" style="width: @(loadingProgress)%; height: 10px; background-color: dodgerblue; border-radius: 13px; transform: translateY(-10px);"></div>
</div>
</body>

@code{
	bool isLeftExpanded = true;
	bool isRightExpanded = false;
	int leftPaneAlign => isLeftExpanded ? 0 : -24;
	int rightPaneAlign => isRightExpanded ? 0 : -39;
	string runStopText = "▶️ Run";
	public bool isRunning = false;
	
	void ToggleLeftSidebar()
	{
		isLeftExpanded = !isLeftExpanded;
		isRightExpanded = false;
		StateHasChanged();
	}

	void ToggleRightSidebar()
	{
		isRightExpanded = !isRightExpanded;
		isLeftExpanded = false;
		StateHasChanged();
	}
	
	async Task ToggleRunStop()
	{
		if (!isRunning)
		{
			runStopText = "Compiling...";
			var response = await AppInterop.compileWrapper();


			if (response.stderr != "")
			{
				codePane.updateConsoleOutput(response.stderr, false);

				string lineSection = Regex.Match(response.stderr, ":([0-9]*?:[0-9]*?):").Captures.First().Value;
				lineSection = lineSection[1..^1];
				int mid = lineSection.IndexOf(":");
				int line = int.Parse(lineSection[0..^(lineSection.Length - mid)]);
				int column = int.Parse(lineSection[(mid+1)..^0]);

				string message = Regex.Match(response.stderr, "error:.*").Captures.First().Value[7..^0];
				AppInterop.makeMonacoErrorWrapper(message, line, column);

				runStopText = "▶️ Run";
			}
			else
			{
				codePane.updateConsoleOutput(response.stdout, false);
				AppInterop.clearMonacoErrorsWrapper();
				AppInterop.startSimWrapper();
				runStopText = "🟥 Stop";
				isRunning = true;
			}
		}
		else
		{
			AppInterop.stopWrapper();
			codePane!.newLineIfNot();
			codePane!.updateConsoleOutput("Stopped.\n", false);
			runStopText = "▶ Run";
			isRunning = false;
		}
	}

	void OpenExternalHelp()
	{
		string url = "https://adarc-help.mech.website/";
		JsRuntime.InvokeVoidAsync("window.open", url, "_blank");	
	}
	
	public Index()
	{
		app = this;
	}

	public void StateChanged()
	{
		StateHasChanged();
	}

	public async Task triggerRender()
	{
		await JsRuntime.InvokeAsync<object>("triggerClick", refresh);
	}

	private int localIds = 0;

	public static Dictionary<int, ComponentInstance> comps = new()
	{
	};


	public int selectedComponent = -1;

	public static Index? app;
	public static MainCanvas? buildCanvas;
	public static CodePane? codePane;
	public static ComponentPane? compPane;
	public static readonly int defaultScreenWidth = 1920;
	public static double currentWidthRatio = 1;
	public static readonly int defaultScreenHeight = 1080;
	public static double currentHeightRatio = 1;

	public static ElementReference? refresh;



	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			Console.WriteLine("Blazor Load Completed!");

			AppInterop.runtime = JsRuntime;
			AppInterop.jsModule = await AppInterop.getModuleWrapper();

			AppInterop.updateScreenRatios(await AppInterop.getWindowWidth(), await AppInterop.getWindowHeight());

			AppInterop.calibrate();
			//AppInterop.startSimWrapper();
			//AppInterop.updateCodeWrapper();
		}
	}



	#region component pane integration
	private int targetCardComponentId = -1;
	private int moverID => targetCardComponentId == -1 ? 1 : targetCardComponentId;
	private string isVisible = "hidden";
	private bool allowDrop = false;

	private double moverOffsetTop = 0;
	private double moverOffsetLeft = 0;

	public void setTargetID(int id)
	{
		targetCardComponentId = id;
	}


	private void checkForCardDrag(MouseEventArgs e)
	{
		if (e.Button == 0 && targetCardComponentId != -1)
		{
			isVisible = "visible";
			moverOffsetLeft = e.ClientX;
			moverOffsetTop = e.ClientY;
		}
	}

	private void dragCardIfPossible(MouseEventArgs e)
	{
		if (targetCardComponentId != -1)
		{
			moverOffsetLeft = e.ClientX;
			moverOffsetTop = e.ClientY;
		}
	}

	public void addToCanvasIfNecessary(MouseEventArgs e)
	{
		if (targetCardComponentId != -1)
		{
			isVisible = "hidden";
			if (allowDrop)
			{
				++localIds;
				var d = ComponentDeclarations.components[targetCardComponentId];
				var n = new node();//label with localId (easy tracking)
				n.localLabels.Add("user_" + d.nodeName);

				GraphSynthInvoke.GetNodes().Add(n);
				GraphSynthInvoke.inputs.Add(d.nodeName);
				GraphSynthInvoke.recg_apply();

				GraphSynthInvoke.GetNodes().FindAll(n => n.localLabels.Find(s => s.StartsWith("localId:")) == null).ToList().ForEach(n => n.localLabels.Add("localId:" + localIds));
				GraphSynthInvoke.GetArcs().FindAll(a => a.localLabels.Find(s => s.StartsWith("localId:")) == null).ToList().ForEach(a => a.localLabels.Add("localId:" + localIds));
				comps.Add(localIds, buildCanvas.unZoom(new ComponentInstance(targetCardComponentId, n, e.ClientX - (.5*d.rightOffset), e.ClientY - (.5*d.bottomOffset)-50)));//50 is height of toolbar
				BuildCode.outputPins.Clear();
				buildCanvas!.connLines.Clear();
				foreach (var c in comps.Values)
				{
					updatePinBindings(c);	//keep an eye on this. could be not good for performance.
				}


				if (comps.Values.Any(c=>c.globalId==1))	//set has an arduino uno
				{
					foreach (var c in comps.Values)		//iterate all components (don't know what listeners exist already)
					{
						if (c.globalId != 1)			//exclude the arduino
						{
							foreach (string listen in c.data.pinsToListen)	//add a listener for each important pin
							{
								int pin = -1;
								if (0 == c.getConnection(listen, out InstanceConnection? conn, out List<InstanceConnection>? all))
								{
									pin = conn!.toId;
								}

								bool hasList = AvrCPU.pinListeners.TryGetValue(pin, out var list);
								//hopefully the only time the list extends 
								//is on arduino, which is excluded here
								if (!hasList || !list!.Any(el => el.actor == c))			//no list for this pin yet, or the list does not contain any connections for this component
								{
									int pin2 = -1;
									if (0 == c.getConnection(listen, out InstanceConnection? conn2, out List<InstanceConnection>? all2))
									{
										pin2 = conn2!.toId;
									}
									var info = c.data.compType.GetMethod("translate");
									if (info != null)
									{
										AvrCPU.addListener(pin2, c, (c) => info.Invoke(c, [c]));
									}
									else
									{
										Console.WriteLine("Attempted to listen on component without translation! this is probably an error!");	
									}
								}
							}
						}
					}

					AppInterop.updateCodeWrapper();
				}
			}
			moverOffsetLeft = 0;
			moverOffsetTop = 0;
			targetCardComponentId = -1;
		}
	}
	#endregion

	private readonly List<string> ruleNames = new();
	private readonly double totalRules = 19.0;
	private string fileToLoad = "";
	private double loadPercent = 0;
	protected override async Task OnInitializedAsync()
	{

		// loads rulesets
		// allRulesLoaded = false;
		// ruleNames.Add("BondGraphRuleset"); //58
		// ruleNames.Add("SimplificationRuleset"); //28
		// ruleNames.Add("DirRuleset"); //5
		// ruleNames.Add("newDirectionRuleSet_2"); //17
		// ruleNames.Add("DirRuleset3"); //4
		// ruleNames.Add("Simplification2"); //32
		// ruleNames.Add("NewCausalityMethodRuleset"); //6
		// ruleNames.Add("NewCausalityMethodRuleset_2"); //4
		// ruleNames.Add("NewCausalityMethodRuleset_3"); //2
		// ruleNames.Add("INVDMarkerRules"); //6
		// ruleNames.Add("INVDMarkerRules_2"); //0?
		// ruleNames.Add("CalibrationNewRuleset"); //12
		// ruleNames.Add("CalibrationNewRuleset_2"); //0?
		// ruleNames.Add("RFlagCleanRuleset"); //1
		// ruleNames.Add("ICFixTotalRuleset"); //12
		// ruleNames.Add("TransformerFlipRuleset"); //1
		// ruleNames.Add("TransformerFlipRuleset2"); //1
		// ruleNames.Add("Clean23Ruleset"); //4
		// ruleNames.Add("BeforeBG-VerifyDirRuleSet"); //8
		int x = await RuleSetMap.getInstance().loadRuleSet("ADD", navMan, this, 0,84);
		await RuleSetMap.getInstance().loadRuleSet("CONNECT", navMan, this, x,84);
		compPane!.releaseLockout();
		base.StateHasChanged();
		
		
		//all else finish first
		await Task.Delay(1000);
		loadingProgress = -1;
		
		// await RuleSetMap.getInstance().loadRuleSet("BIG1");
		// foreach (string str in ruleNames)
		// {
		// 	await RuleSetMap.getInstance().loadRuleSet(str);
		// 	loadPercent = Math.Floor((RuleSetMap.getInstance().getNumRules() / totalRules) * 100.0);
		// 	base.StateHasChanged();
		// }

		// // allRulesLoaded = true;


		
	}

	public void updatePinBindings(ComponentInstance comp)
	{
		comp.connMap.Clear();
		//buildCanvas!.connLines.Clear();

		var compPins = getPins(comp.gsNode, comp.data.nodeName);
		if (compPins.Count == 0)
		{
			return;	
		}

		var connArcs = GraphSynthInvoke.GetArcs().Where(a=>a.localLabels.Contains("connection")).ToList();
		//List<arc> connArcs = new();

		foreach (arc a in connArcs)
		{
			ComponentInstance ha = comps[Convert.ToInt32(a.To.localLabels.Find(s => s.StartsWith("localId:")).Substring(8))];
			ComponentInstance hb = comps[Convert.ToInt32(a.From.localLabels.Find(s => s.StartsWith("localId:")).Substring(8))];

			node temasd = a.To;
			node adstemasd = a.From;

			if (ha == hb)
			{
				continue;
			}

			if (ha != comp && hb != comp)
			{
				continue;	
			}
			else if (ha != comp)
			{
				var temp = ha;
				ha = hb;
				hb = temp;
			}

			var aPinName = "**NF**";
			if ((ha.globalId == 1 && a.To.localLabels.Contains("localId:1")) || (ha.globalId != 1 && !a.To.localLabels.Contains("localId:1")))
			{
				aPinName = (from df in ha.data.pins.Keys where a.To.localLabels.Contains(df) select df).FirstOrDefault("**NF**");
			}
			string bPinName = "";
			

			if (aPinName == "**NF**")
			{
				aPinName = (from df in ha.data.pins.Keys where a.From.localLabels.Contains(df) select df).FirstOrDefault("**NF**");
				bPinName = (from df in hb.data.pins.Keys where a.To.localLabels.Contains(df) select df).FirstOrDefault("**NF**");
			}
			else
			{
				bPinName = (from df in hb.data.pins.Keys where a.From.localLabels.Contains(df) select df).FirstOrDefault("**NF**");
			}

			//if arduino and data pin being connected, register to code.
			if ((ha.globalId == 1) && System.Text.RegularExpressions.Regex.Match(aPinName, "d[0-9]{1,2}").Success)
			{
				BuildCode.outputPins.Add(Convert.ToInt32(aPinName.Substring(1)));
				//Console.WriteLine("1: " + BuildCode.outputPins.Count);
			}

			if (aPinName == "**NF**")
			{
				Console.WriteLine(ha.data.name + " is missing a pin definition!");
			}
			if (bPinName == "**NF**")
			{
				Console.WriteLine(hb.data.name + " is missing a pin definition!");
			}
			int i1 = ha.data.pins[aPinName];
			int i2 = hb.data.pins[bPinName];


			comp.addConnection(i1, hb, i2, a);	//also sets up the drawn line
		}
	}


	public List<node> getPins(node n, string name){
		//n is root, connected to main node but not main node.
		string fullName = "user_" + name;
		if (n.arcs.Count == 0)
		{
			return new();
		}
		var mainNode = ((arc)n.arcs[0]).otherNode(n);
		//traverse arcs to get pin nodes, except the root node
		var potential = mainNode.arcs.Select(a => ((arc)a).otherNode(mainNode)).ToList();
		return potential.Where(n => !n.localLabels.Contains(fullName)).ToList();


	}

	//List<String> inputs = new List<string> {  "arduinouno_rev3","adxl345" };
	// List<String> inputs = new List<string> {  "arduinoUno_rev3","led" };

	//    public void addcomp()
	//    {


	//        GraphSynthInvoke.recg_apply();
	// 	List<node> b = GraphSynthInvoke.GetNodes();
	// 	List<arc> c = GraphSynthInvoke.GetArcs();

	// 	int numofcon = 0;
	// 	for(int i = 0; i<c.Count; i++)
	// 	{
	// 		if (c[i].localLabels.Contains("connection")){
	// 			numofcon++;
	// 		}
	// 	}
	// 	Console.WriteLine("the number of nodes is " + b.Count);
	// 	Console.WriteLine("the number of connections is " + numofcon);
	// }

	public void removecomp()
	{
		node Comp2remove = Index.comps[selectedComponent].gsNode;

		GraphSynthInvoke.removeComp(Comp2remove);
		comps.Remove(selectedComponent);
		List<node> b = GraphSynthInvoke.GetNodes();
		List<arc> c = GraphSynthInvoke.GetArcs();

		BuildCode.outputPins.Clear();
		buildCanvas!.connLines.Clear();
		foreach (var comp in comps.Values)
		{
			updatePinBindings(comp);   //keep an eye on this. could be not good for performance.
		}

		int numofcon = 0;
		for (int i = 0; i < c.Count; i++)
		{
			if (c[i].localLabels.Contains("connection"))
			{
				numofcon++;
			}
		}
		Console.WriteLine("the number of nodes is " + b.Count);
		Console.WriteLine("the number of connections is " + numofcon);
	}

	private void handleKeyPress(KeyboardEventArgs e)
	{
		Console.WriteLine(e.Key);
		if (!isRunning && ((e.Key == "Backspace" || e.Key =="Delete") && selectedComponent!=-2 && selectedComponent!=-1))
		{
			removecomp();
		}
	}
	
	//progress bar
	public double loadingProgress = 0;
	
	private void HandleZoom(string action)
	{
		const double zoomStep = 0.1;

		if (action == "in")
		{
			buildCanvas!.zoomFactor -= zoomStep;
		}
		else if (action == "out")
		{
			buildCanvas!.zoomFactor += zoomStep;
		}

		buildCanvas!.zoomFactor = Math.Clamp(buildCanvas!.zoomFactor, .4, 3);
		
		StateHasChanged();
	}

	bool showZoomTooltip = false;
	bool labelShownBefore = false;

	void ShowLabel()
	{
		if (!labelShownBefore)
		{
			showZoomTooltip = true;
		}
	}

	void HideLabel()
	{
		showZoomTooltip = false;
	}

	void GotItClicked() //for zoom tooltip
	{
		labelShownBefore = true;
		showZoomTooltip = false;
	}

	bool showRightClickTooltip = false;
	void HideRightClickTooltip() {
		showRightClickTooltip = false;
	}

	
	void ShowTutorial()
	{
		<!-- Add intro js tutorial -->
	}
	
	void showRightClickTooltipFn()
	{
		showRightClickTooltip = true;

	}
	
	
}

