@if (_isVisible)
{
    <div style="padding: 20px; border-radius: 5px; position: absolute; left: 50%; top: 50%; transform: translate(-50%, -50%); max-width: 500px; box-shadow: 0 3px 30px rgba(33, 33, 33, .3); z-index: 1000000">
        <h1 style="font-size: 18px; font-weight: 700; margin-bottom: 20px">@GetHeading()</h1>
        <div style="display: flex; gap: 20px">
            @switch (_step)
            {
                case Step.Initial:
                    <button @onclick="() => HandleSelect(Board.ArduinoUno)">
                        <RazorArduinoUno Width="120px" Height="80px"></RazorArduinoUno>
                        <h2>Arduino Uno</h2>
                        <p>Great for beginners and small projects</p>
                    </button>
                    <button @onclick="() => HandleSelect(Board.ArduinoMega)">
                        <RazorArduinoMega Width="120px" Height="80px"></RazorArduinoMega>
                        <h2>Arduino Mega</h2>
                        <p>Ideal for bigger, more complex projects</p>
                    </button>
                    <button @onclick="() => _step = Step.IoPins">
                        <h2>Help me choose!</h2>
                    </button>
                    break;

                case Step.IoPins:
                    <button @onclick="() => _step = Step.Serial">
                        <h2>Less than 20</h2>
                    </button>
                    <button @onclick="() => HandleSelect(Board.ArduinoMega)">
                        <h2>More than 20</h2>
                    </button>
                    <button @onclick="() => _step = Step.Serial">
                        <h2>I don't know</h2>
                    </button>
                    break;

                case Step.Serial:
                    <button @onclick="() => _step = Step.Complexity">
                        <h2>No</h2>
                    </button>
                    <button @onclick="() => HandleSelect(Board.ArduinoMega)">
                        <h2>Yes</h2>
                    </button>
                    <button @onclick="() => _step = Step.Complexity">
                        <h2>I don't know</h2>
                    </button>
                    break;

                case Step.Complexity:
                    <button @onclick="() => HandleSelect(Board.ArduinoUno)">
                        <h2>Simple, small programs</h2>
                    </button>
                    <button @onclick="() => HandleSelect(Board.ArduinoMega)">
                        <h2>Complex programs with large libraries</h2>
                    </button>
                    <button @onclick="() => HandleSelect(Board.ArduinoMega)">
                        <h2>I don't know</h2>
                    </button>
                    break;
            }
        </div>
    </div>
}

@inject BoardService BoardService

@code {

    [Parameter] public EventCallback<Board> OnSelect { get; set; }

    private bool _isVisible = true; // Visibility state variable

    private Step _step = Step.Initial;

    private enum Step
    {
        Initial,
        IoPins,
        Serial,
        Complexity,
    }

    private string GetHeading()
    {
        return _step switch
        {
            Step.Initial => "What project are you building?",
            Step.IoPins => "How many input/output (I/O) pins will you need?",
            Step.Serial => "Will you be using multiple serial devices (e.g. GPS, GSM, or Bluetooth)?",
            Step.Complexity => "How complex is your project in terms of memory usage (e.g., libraries, large datasets, or graphical displays)?",
        };
    }

    private async Task HandleSelect(Board board)
    {
        BoardService.Board = board;
        await OnSelect.InvokeAsync(board);
        _isVisible = false; // Set visibility to false when a board is selected
        Pages.Index.app!.RunTutorial();
    }

}