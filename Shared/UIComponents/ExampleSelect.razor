@using ADArCWebApp.Shared.Data
@inject BoardService BoardService

<div style="background-color: #fff; border: 1px solid #ccc; border-radius: 5px; padding: 1rem">
    <h1 style="font-size: 1.75rem; margin-bottom: 1rem">Examples Library</h1>
    @if (_suggestions.Any())
    {
        <h2 style="font-size: 1.5rem; margin-bottom: 0.25rem">Suggestions</h2>
        <div style="display: grid; grid-template-columns: repeat(4, 1fr); grid-auto-rows: auto; grid-gap: 1rem; margin-bottom: 1rem">
            @foreach (var example in _suggestions)
            {
                <a style="text-decoration:none; padding: 0.5rem; cursor:pointer; display:flex; flex-direction: column; align-items: center; border: 1px solid #ccc; border-radius: 5px; box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;" aria-roledescription="button" href="@example.Url" target="_blank">
                    <h3 style="font-size: 1.15rem; color: black; text-decoration: none;">
                        @example.Title
                    </h3>
                    <img src="@($"images/examples/{example.Image}.png")" alt="@example.Title" style="width: 120px; object-fit: cover"/>
                </a>
            }
        </div>
    }
    <h2 style="font-size: 1.5rem; margin-bottom: 0.25rem">All</h2>
    <div style="display: grid; grid-template-columns: repeat(4, 1fr); grid-auto-rows: auto; grid-gap: 1rem">
        @foreach (var example in _examples)
        {
            <a style="text-decoration:none; padding: 0.5rem; cursor:pointer; display:flex; flex-direction: column; align-items: center; border: 1px solid #ccc; border-radius: 5px; box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;" aria-roledescription="button" href="@example.Url" target="_blank">
                <h3 style="font-size: 1.15rem; color: black; text-decoration: none;">
                    @example.Title
                </h3>
                <img src="@($"images/examples/{example.Image}.png")" alt="@example.Title" style="width: 120px; height: 120px; object-fit: contain; margin-top: auto; margin-bottom: auto"/>
            </a>
        }
    </div>
</div>

@code {

    public record Example(string Title, string Image, FrequencyVector<int> ComponentFrequencies, string Url);

    [Parameter, EditorRequired] public FrequencyVector<int>? ComponentFrequencies { get; set; }
    private List<Example> _suggestions = [];

    /// <summary>
    /// This ensures that we aren't recomputing GetSuggestions on every render (expensive)
    /// </summary>
    protected override void OnParametersSet()
    {
        _suggestions = GetSuggestions(3);
    }

    /// <summary>
    /// Compute the suggestions given the current state of the workbench and the examples library
    /// </summary>
    /// <param name="limit">The number of suggestions to display</param>
    /// <param name="threshold">The minimum similarity required to suggest an example</param>
    /// <returns></returns>
    private List<Example> GetSuggestions(uint limit = 3, double threshold = 0.5)
    {
        if (ComponentFrequencies == null) return [];
        PriorityQueue<Example, double> suggestions = new();

        foreach (var example in _examples)
        {
            var similarity = ComponentFrequencies.SimilarityTo(example.ComponentFrequencies);
            Console.WriteLine("Suggestion similarity: " + similarity);

            if (similarity >= threshold)
                suggestions.Enqueue(example, similarity);


            if (suggestions.Count > limit)
                suggestions.Dequeue();
        }

        List<Example> result = [];

        while (suggestions.Count > 0)
        {
            result.Add(suggestions.Dequeue());
        }

        return result;
    }


    private List<Example> _examples =
    [
        new("Control LED with Button", "control-led-with-button", new FrequencyVector<int>(new Dictionary<int, uint>
        {
            [1] = 1,
            [29] = 1,
            [18] = 1
        }), "/?c=H4sIAAAAAAAAA71TTWvjMBS851c81EsLprZlJ7YVCgvd0gT2I_SD7YIvbqwmAkU2lpw9BP_3SknsSN1daC8FG2lGz_PejO3dCACdBSGJPLO7rkqKCMpFLpaVkAqYUPDcKlWJBRNX8dTmOS0NiaemPBdftnKnV1Uz8V3LnB-OvZ-PD4vHh4up799T1dag1hS-3XwFXQaqgqpVdatAspUouDTMsSAXAL3UMIE3__GX2OGw12voktEt1QNqWQkvTbWxqnLR9cPynelw8nevCkWvSrZiquB3tChPXU0_w9jtpCnXCr7_q2GK2j3aIMCJPFS4hnx_fnnjsZd_VJvx9eyUbamE2fx25u3r_-zFDbaUPNU2gokVMAXGE8Bx7P0offCWrYspDM71Dh3f9aaWiOz0XqOw35nvIQxJ4PVoxlZrrm-FiGg5H_hbXj0XfF4iEg7cEyJpjAf4GxEcpN5Jd0ySCbbwhODIxonV9yxMHZTZCAcOCh2ELWRcLoqm2BirnWG7wxnCbxzjjzhOHctJZFvOEtdxFjmOQxx-nuMjqellxavGZvYPRkT__WPkuWxMUENL1JPd6LT06UVv0os-kB7O7PSyJL4c2_lFgYVNgmkWO8yEjF3i00KsW7nWwbw7xTvKaSH_F-VIX90r10UtgYIFAAA"),
        new("Turn on LED when Dark", "turn-on-led-when-dark", new FrequencyVector<int>(new Dictionary<int, uint>
        {
            [1] = 1,
            [10] = 1,
            [18] = 1
        }), "/?c=H4sIAAAAAAAAA71UW2_aMBR-51ccpS8wZcQOJIVESK3o1Faia9W16ybx4iYGLLkxSpy2EuK_7zgXSKCa1IdNIsTnfr7vHGfTAbBOCA1825ymKuZWYM2TeRKpJNMgEg3rldIq5ZnI8HUnkgkdhk275LHRuqh0HJhd3MN0xVIWaZ5iiIiy2nkhFdNweX5zc-5PSP80bBvuZ5T4E4-Epvw8OXvNNvjWa5HcYFvdsox9-_hw9_jQCx3nB9f5GmbfLgBdQCtQuV7nGmKxFJpJyMQyYRKrA9Q5DqHY199byVr2Om3KIy5eOTDMppb7tNu6T7kxNQwVpctPJnM-Kc_3nMVHZXuhCShRy_x9EjEZ5ZJpPsvfu40cvYIKcJyHPE1AYTcrXgAWCxMHIoNnLtUbMIh4qpnpd4V1VkrG0OX9Zd-mhBjXnil4Jromap4TMpgCWrZF41Az9pQKveP56vryqhce18aILf9L3Oz2CcN2cYtFM7AirUTeQn3AXtGZ40zNerBEZzgE4xmbeRgMdaxAB9PL0YJV-9W2mA0rFwygzF-3UDRpEj-zDKtUcKuJpzhDkSz3M3tVUrNlPeKiYXCQUHfYhy_gNaZbDp0lEZ-4BEfxpY5F_y6Frw3RO9yKtXrrmo4xiPIB_hsFJXaBr4cR--Q25nJK4L1qadCqzQQwU7jbVURtVRf9ZZ1ZwaZjxmjR-mQ-BpQGxK6lK7FcSXy0FSS5lDv9pVTPTF7HVkB3ul9WMHLHO_G3Fbh0L55QLxgNSEP2D-ynQdM6aknjpuSSlkRbktuQDMo7_BS9GKhbo92WNmt4gHj4GcSjFuSx24Q8GrQRjwctxC3zPwZcKVEdKanSpqYIHAT45fcsu60dBlbKY6tWbjv7V02ef0Ce_xnySJM8vDKk7zX5872GbBhEF9pS-Yc-_41GvEofkzg8JpGSYZ9-SGIHf9s_zARTi3gHAAA"),
        new("Display Temperature on LCD", "display-temperature-on-lcd", new FrequencyVector<int>(new Dictionary<int, uint>
        {
            [1] = 1,
            [22] = 1,
            [14] = 1
        }), "/?c=H4sIAAAAAAAAA71VYW_aMBD93l9xCl-ohCBOILSpJrVKx4bUTdXaD52EVLmJAa_GYXZMxyr---yEBAfSSUjdJBC-u3cv994ZeD0BcFouCv2OOUVpQpzQaVEeM5UQmCjX9aMvVw9BMBx053n4ccL36jf0p6JJJNYyw-xx7EU7pMYmZEo5geju8Xb81QNvwrd8kMWpWjLS3pZOLwy-14Ob6BpwkggiJWCeQJzyKZ0pgTOacmgv8DMBqQSBbE4qIJUaJwSJM5imAtapEiBJppanE34wILA4abu__A4KOvq5vd5V8kPJrE44BU5ifcJibQa7XMnXCYdeb8xpRjGjv4sB9LQ6bRi7VFfaRgZAjrxXgoMeeQuDJxw_MzqbZ2VDlbC7rqlcMrwGDC-ExemCwMJMMSMGcclk7HbcAm4oloLyrG389rxqMspn3W63SBbQS_R8YXEbi7D2R1ubwBPRobZ0nr7oxnxaQXCiz3LCN4V2ZrTDlKU4g5gwSZX04EO5wq7B35PFMtJC9GO-6RAyHRO9NLMpyiEqunY0UzwXhM8JzZqYRm8zjarGyrOIESwqn82lyX3JM3b3CjNFZGFkXOtbCrKiqZKQFBYdrONtOdVONHpEhb5HIn1p2o_RFdpb2QFKT5sXC9Gu629D1Z0p5kL5XHfFqo8fzNrSG7ON7EbzTogerY1c4wjkN8jZ_rosltIJX_VZR6g8mV8ghEK3U0af9Tci_1Y4IVeMVflPLH3CbJw4IapyD0545p1X4Xcn9NAubKFBrdxCwV59aD23hc5q0bkdeW4tQrXIsyKj8hYLvDBSNya7KWqOt6fYO0Zx35Y8dH1b8qDfHdQ023WjeQ_wj0VvkzptXU87n7f7-n_G7TuderYfBqjMbE52H6WH_p6H_hEeep7tIUKD2r0ZBjULa2XjYa3-3xxs9fuNxg0OjXOcyriOTTBoJAgOCaaYSdLMEbwDx_AdOM4aOYaHHG5z__nx_fYlPNGvzR--cvPNNAkAAA"),
        new("Control Servo with IR", "control-servo-with-ir", new FrequencyVector<int>(new Dictionary<int, uint>
        {
            [1] = 1,
            [16] = 1,
            [23] = 1
        }), "/?c=H4sIAAAAAAAAA71VXW_aMBR951dY4QUkRuKktDSoUstH22hth-i6bhJSZRIPsgYbOQ60Qvnvs52E2oxq6sMmIeL7dY7P9XWyrQFg1R3oey25GtAIW75Vj0mYZBEG08xxvME9ZmvaXihjNCV70WDC8JJy3F6sVlXKlKgasHxN5bMHbHvAMOIYKBvQ2S8ccsApCCnhjCYAFZEpiQkHK5qCM-D0bPsbYjGaJVimcobC5xJAZMQ8poJIAKQcyKpgMg7uRJ3bkxuwbeEAxdZAFDPBJ_JBGs8JSlK97mZ0-VXSvfSdnu6fBFfXReDSDAy_PN4pf9dwP4yV03MU__k63U6JEH6POchWgC8q8YhExdZCHK8xE0lVn9qIcxQuGl6zp3s3LOa4ISQ3RUdu0bMAyhjWEFOOGE8B4sABEZ4zjFNZH7BJydGe4XlMGqpDrdHdRf9m9HQzGj5djkbD_sXgs-TLi10nctfgPG5o1REOxWA0mvnWtodqrchLBUpNhDiShUC1ouiyaMcfIFEwGYrUdkiXS9GIXlFT_AvSqvBMnUq-LQKii7d0rSuW4yCMBP_koMEol6MV0oxwzMKEhs-bOMXNsliN06czAJ2CLT_HOpE65r8ysXi-0KgOcsjpd_vvEsmxeZ8nohuyw5fGBrHIgJc34hDuw_h9VDF4FWa2OoAIuxWmPH3pPzh0j9JQsARvdpev6k15c4t67cQZTrOlGBt5_ScYRa-yoByaEuxFXttyXER9rsbQKt9Fy1Vq-duaRLVgtZLvKwh9p1VZ1-JkEnk6lk-yJNn5rxI6Q0kQWT7c-b5bftc93Zk_LN-Fb2YddoxwHR7vxU803jrsGtapbrmOYUHDcjVLqhwjhpZSai69eRGz3D3F7gcUu54h2YPtji7ac03NRlyqNhL-sejSKdyIzBOse1ShJ75HzonVMr1HvlM58trbo2qet9c87yPjcqw3D8KTjtk998gz2reXoabGSPkvU1MTv_w3DdaNaM8HAAA"),
        new("Motion Detector Alarm", "motion-detector-alarm", new FrequencyVector<int>(new Dictionary<int, uint>
        {
            [1] = 1,
            [30] = 1,
            [15] = 1
        }), "/?c=H4sIAAAAAAAAA72UXYvaQBSG7_0Vw3jThWAySfyKFKQfuwa6Kla77SKU0czqwDgJycSLlfz3nolRM-5Cu5Q2oM45877znicJHhoI4aZDAs_Sq49xxHCA17HMFOJSoQ-Lx8fPs5_TcIzeI3eA0HDtL-VlPxxPF_Nq24dt2w5lkiuUcIme4hSpLUPTcIYyJrM4XcphIkClL9v-qmiqEM2yfMflBskY7WLFY4kipthasQjkfA8HO5UFnZzfaMrpSrAyImU00n4dpWMzRVWeLSW499lhKZHu3gPYuwuMNVnMYfCbEqhT15yBrHKlFRD4ia0FTVmFATMDPGAuZXHMEWXOngqYNuIbrqiYwViX024Gtq07R59W5kxbIZ8_bQ-2fX-NrkmHPDmerK_q3IeUKwNlFN6N9PHzPJVolT8_sxRNxidXwlO4z4rBYFo4KPswNSoYpI5fuedV8Pa3wV8mDy9yb29fCQZhLbe8abh63XZJhoNDQxswOa30K0lI4FinasQ3WwEfhQOZC3Hu34l4RUUY4YCce99x0HP75_IHDlxyKZukbWw3Sedqv1vLbZKeUfXrlesYFTEqt1ZpyilN6U6jFrpbHPewe0XsvoHYcwzkjtPqtuvUvV7Ldz0T3BRp9heq_4nvXeF7b3ng7Tp-v--3DPput9U22E2FRr-S_GPwqqlFvlsrS5cXwH-wjy2z6wfOqVFYdT_5S7_3p35y9jcuP_BVNIpf9wu1IDkGAAA"),
        new("Control Motor with Buttons", "control-motor-with-buttons", new FrequencyVector<int>(new Dictionary<int, uint>
        {
            [1] = 1,
            [25] = 1,
            [29] = 2
        }), "/?c=H4sIAAAAAAAAA91VXYvaQBR991dcxhcFWzOTZNXIgrbrrkL9IGptYUGyzaymxESS0VIk_70zxsRJ_NhaaB8qBnPvPfd6zplLsisAoKKCDa0i7j76NkUG-uZ7IQPHY_BhOpkMB_NRbzB_HJqztvkA90CaUK0--sEPK7DhZcOY7z17Z3vMzueOOe7wHk30mHRLg5CmPXJXfzgZmvPxqNN5EK28RW1Wq51BG0qjWR_CNaU2cDgLfLd82tgbYN5Sa4L4VKs8PIchHFM_Yoig0NqGu2cPYO14fS6_dCq50huMppNy8wLqIFJGycicsMpwOjmZlmq4WiWZqrhsZ-Ewy50FDpOHfBrOYszZOknqUSzf3csXNsXnMmYWo8nx3iczTGrZZ7wpN09X4WRYcu4Xhx0sFMNOdwSg5ZTOUbuHbu-pG-3p8_Ps-1sKr3Fxn7pkj-iK_XnLIYGwPMv1FzLgeJZYVwTntv19wzct3tGS8o7oOl9RiMQZtWiGfGrFOfJBXLxKXmJ2gbss70byCWmgbkgTamPmr4EtKax85gfgvILnH44HnBDWAQ1Det3xt0n_puHKHhTFa2FT1_pZwsphl9HhEbZah8jYFcQohJM78ZjD2FAqSdR1FkuXXwwZ3sZ10_yT679Ybs9GBk5zX5BRVxpp-BUZRNUqx7l6plzEd7l6TfrfIq5nooYcESUT4UxEpEioHFmBtRJSI5GN4hoiOcXkBsWkIUuuYfJel0XXpVCIzgKE7CziL8s-JHl6vQmX1JZT-07V4K82HVWyWc1AJnWpxXcWJZWocPxJjFRzRqp_bCTGipp1Uss5mUMIK7X_yEotZ6V2i5W6bGX9Tsk6qeaXMosQTqr_dCtj4QX-jX4BB-dGX10JAAA"),
        new("Change LED Color with Distance", "change-led-color-with-distance", new FrequencyVector<int>(new Dictionary<int, uint>
        {
            [1] = 1,
            [20] = 1,
            [6] = 1
        }), "/?c=H4sIAAAAAAAAA71W227bOBB9z1cQyosDeBNJrl1bxgJJbTcNkN0GTtJuAQMBLY1sAhRpkFSabKB_75C6WHJ6QR92H2JpLmc4Z3hI5eWIEO_YD6JB377NZAJe5B0zEfM8AbLKfX8wu1BJzoQ83TpzsRIH8c9MwQ-Dd--vr8LZPrwSZ2dkpoAaIFQQJrShIgYiU2K2QMp0okFoqVaiMk3K8TGt0J-oYnTNgRhJtJEKSAZU5woSkrCqHBMkBmFYBgaUXgkmTDB6ME1CXWsOKRNArhdzskOMyLO1y48lNoZVDHl3fb94sPE_yXDaDlwuF4u_q8ioE1ku5pV_UK8z21KxwY63TNu2n2WuLFc7lfCtJjQ2OeXEcqVJokBrh2IpyTUTmxIX4-5YYjg8TjhLgfxBdkqucRbPxH8K_HYP5eQeLubz5eL2Flvxn8pmzh_1y0oQcv51Tc7OrgQzjHL2L7jFY5lluWAxNUwKm3ULOGt-uoYNE73JyPdPpoi6NVQZ3CQb62JIKhVJYJ1vELCxFfAPAWDqGSNZTWRudrnRNo6uv5BYr55z_-P93c393cm0HWxm_d1oNe9WrKjG_j4XsWvLSgV7sBKLJcceK73ZptZUo3QwaXn5jjxSngM29ihZYiGYMLOAnh0qSqxvnxsFINzbGrMLN08qKJebz4qZfUOYj_Oq-Ft9uuUU22yNcHvche1ZugVOpiXQGb-ANtOzDZV7BGV3r4BFqQL-4nbmwhjIdsYOCHXVOkEJNZSkSmZuTvWBRN2wXnkcTzdg5pjUqyH9ruZOyrk0GtopHFjPKT6cIyQqX8ut7GZx0RR1XG6s8_UpXzmJtuRVbm2znw0Xs8UjtZU80eVayKGJldcUGfh1u6Sz7eFw2Pf7peyXWNbqO-ZSA1H2RDtIcQ6vCuJt8ZOKrqqr-QU4l19d2Qy1rOy92KoM3y3htwpcOnVYfEpVG4q_DbzaMTdcPLwm173WYEEpuzyqg-IdhZeOVYK9dlLKuB1ZUU46AU6fe0F9CWSU89JH1pDae1jAk6nBTmhe9VnJdtqLXo5sK15Qv9lPTxBEfr-2PqBIuRWqF4mc88Z_yfGS41eJFwWN7x8vGoeTxvziRWGwN4-DYTQe-C17dBB_G7Wj4441aVuh37GCjhW2LMvyhiqaWaqF9RZlzAsPGIe_wTj0O5RH49Nhm3Tgj7ukR5NWgqXdzfg_aQ8OaA9-g_aozXoynHRZTwYdksMIv0wHtA9S_mPelRPd9TXQdjrsAP-v8t94_a73TTQMa09xtH_gT3FUfAPl8OVTnwkAAA"),
    ];

}