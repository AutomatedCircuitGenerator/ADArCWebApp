@inject BoardService BoardService

<div style="background-color: #fff; border: 1px solid #ccc; border-radius: 5px; padding: 1rem">
    <h1 style="font-size: 1.5rem">Select an example to load</h1>
    <div style="display: grid; grid-template-columns: repeat(4, 1fr); grid-auto-rows: auto; grid-gap: 1rem">
        @foreach (var example in _examples)
        {
        <div style="display:flex; flex-direction: column; align-items: center; border: 1px solid #ccc; border-radius: 5px; box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;" aria-roledescription="button" @onclick="() => HandleClick(example)">
            <h2 style="font-size: 1.25rem">
                @example.Title
            </h2>
            <img src="@($"images/examples/{example.Image}.png")" alt="@example.Title" style="width: 120px; object-fit: cover"/>
        </div>
        }
    </div>
</div>

@code {

private record Example(string Title, Board Board, string Image, string Json);

private void HandleClick(Example example)
{
    BoardService.Board = example.Board;
    Pages.Index.App.SetupBenchFromJsonString(example.Json);
}


private List<Example> _examples =
[
    new("Multiple Thermocouples", Board.ArduinoUno, "multiple-thermocouples", "{\n  \"LocalId\": 7,\n  \"Code\": \"#include \\u003CMAX6675.h\\u003E\\n#include \\u003CLiquidCrystal_I2C.h\\u003E\\n\\n// Thermocouple pins\\n#define CS_PIN2 2\\n#define CS_PIN3 4\\n#define CS_PIN4 7\\n#define CS_PIN5 8\\n#define CS_PIN6 3\\n\\n// Thermocouple objects\\nMAX6675 tcouple2(CS_PIN2);\\nMAX6675 tcouple3(CS_PIN3);\\nMAX6675 tcouple4(CS_PIN4);\\nMAX6675 tcouple5(CS_PIN5);\\nMAX6675 tcouple6(CS_PIN6);\\n\\n// LCD object (adjust the I2C address if needed)\\nLiquidCrystal_I2C lcd(0x7, 16, 2);\\n\\nvoid setup() {\\n    Serial.begin(9600);\\n\\n    // Initialize the LCD\\n    lcd.init();\\n    lcd.backlight();\\n    lcd.print(\\u0022Initializing...\\u0022);\\n    delay(500); // Allow time to read the welcome message\\n    lcd.clear();\\n}\\n\\nvoid loop() {\\n    // Read temperatures from each thermocouple\\n    float celsius2 = tcouple2.readTempC();\\n    float celsius3 = tcouple3.readTempC();\\n    float celsius4 = tcouple4.readTempC();\\n    float celsius5 = tcouple5.readTempC();\\n    float celsius6 = tcouple6.readTempC();\\n\\n    // Display temperatures on Serial Monitor\\n    Serial.print(\\u0022T2: \\u0022); Serial.print(celsius2); Serial.println(\\u0022 C\\u0022);\\n    Serial.print(\\u0022T3: \\u0022); Serial.print(celsius3); Serial.println(\\u0022 C\\u0022);\\n    Serial.print(\\u0022T4: \\u0022); Serial.print(celsius4); Serial.println(\\u0022 C\\u0022);\\n    Serial.print(\\u0022T5: \\u0022); Serial.print(celsius5); Serial.println(\\u0022 C\\u0022);\\n    Serial.print(\\u0022T6: \\u0022); Serial.print(celsius6); Serial.println(\\u0022 C\\u0022);\\n\\n    // Display temperatures on the LCD\\n    lcd.clear();\\n    lcd.setCursor(0, 0);\\n    lcd.print(\\u0022T2: \\u0022); lcd.print(celsius2, 1); lcd.print(\\u0022C\\u0022);\\n    lcd.setCursor(0, 1);\\n    lcd.print(\\u0022T3: \\u0022); lcd.print(celsius3, 1); lcd.print(\\u0022C\\u0022);\\n    delay(500); // Show first two readings\\n\\n    lcd.clear();\\n    lcd.setCursor(0, 0);\\n    lcd.print(\\u0022T4: \\u0022); lcd.print(celsius4, 1); lcd.print(\\u0022C\\u0022);\\n    lcd.setCursor(0, 1);\\n    lcd.print(\\u0022T5: \\u0022); lcd.print(celsius5, 1); lcd.print(\\u0022C\\u0022);\\n    delay(500); // Show next two readings\\n\\n    lcd.clear();\\n    lcd.setCursor(0, 0);\\n    lcd.print(\\u0022T6: \\u0022); lcd.print(celsius6, 1); lcd.print(\\u0022C\\u0022);\\n    delay(500); // Show final reading\\n}\\n\",\n  \"Comps\": {\n    \"1\": {\n      \"localId\": 0,\n      \"Highlight\": null,\n      \"GlobalId\": 1,\n      \"X\": 790,\n      \"Y\": 428,\n      \"zoomedX\": 351,\n      \"zoomedY\": 367,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {}\n    },\n    \"2\": {\n      \"localId\": 2,\n      \"Highlight\": null,\n      \"GlobalId\": 14,\n      \"X\": 544,\n      \"Y\": 236.5,\n      \"zoomedX\": 105,\n      \"zoomedY\": 175.5,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"temperature\": {\n          \"type\": \"System.Double\",\n          \"value\": 20\n        }\n      }\n    },\n    \"3\": {\n      \"localId\": 3,\n      \"Highlight\": null,\n      \"GlobalId\": 14,\n      \"X\": 704,\n      \"Y\": 126.5,\n      \"zoomedX\": 265,\n      \"zoomedY\": 65.5,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"temperature\": {\n          \"type\": \"System.Double\",\n          \"value\": 20\n        }\n      }\n    },\n    \"4\": {\n      \"localId\": 4,\n      \"Highlight\": null,\n      \"GlobalId\": 14,\n      \"X\": 1246,\n      \"Y\": 189.5,\n      \"zoomedX\": 807,\n      \"zoomedY\": 128.5,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"temperature\": {\n          \"type\": \"System.Double\",\n          \"value\": 20\n        }\n      }\n    },\n    \"5\": {\n      \"localId\": 5,\n      \"Highlight\": null,\n      \"GlobalId\": 14,\n      \"X\": 1062,\n      \"Y\": 127.5,\n      \"zoomedX\": 623,\n      \"zoomedY\": 66.5,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"temperature\": {\n          \"type\": \"System.Double\",\n          \"value\": 20\n        }\n      }\n    },\n    \"6\": {\n      \"localId\": 6,\n      \"Highlight\": null,\n      \"GlobalId\": 14,\n      \"X\": 545,\n      \"Y\": 497.5,\n      \"zoomedX\": 106,\n      \"zoomedY\": 436.5,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"temperature\": {\n          \"type\": \"System.Double\",\n          \"value\": 20\n        }\n      }\n    },\n    \"7\": {\n      \"localId\": 7,\n      \"Highlight\": null,\n      \"GlobalId\": 22,\n      \"X\": 1186,\n      \"Y\": 537,\n      \"zoomedX\": 747,\n      \"zoomedY\": 476,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"text\": {\n          \"type\": \"System.String\",\n          \"value\": \"\"\n        },\n        \"backlight\": {\n          \"type\": \"System.Boolean\",\n          \"value\": false\n        },\n        \"blink\": {\n          \"type\": \"System.Boolean\",\n          \"value\": false\n        },\n        \"cursor\": {\n          \"type\": \"System.Boolean\",\n          \"value\": false\n        },\n        \"cursorX\": {\n          \"type\": \"System.Int32\",\n          \"value\": 0\n        },\n        \"cursorY\": {\n          \"type\": \"System.Int32\",\n          \"value\": 0\n        }\n      }\n    }\n  }\n}"),
    new("Multiple I2C Devices", Board.ArduinoUno, "multiple-i2c-devices", "{\n  \"LocalId\": 5,\n  \"Code\": \"#include \\u003CAdafruit_MPU6050.h\\u003E\\n#include \\u003CAdafruit_Sensor.h\\u003E\\n#include \\u003CWire.h\\u003E\\n#include \\u003CAdafruit_BNO055.h\\u003E\\n#include \\u003Cutility/imumaths.h\\u003E\\n#include \\u003CLiquidCrystal_I2C.h\\u003E\\n\\nAdafruit_MPU6050 mpu;\\nAdafruit_BNO055 bno1 = Adafruit_BNO055(-1, 0x3);\\nAdafruit_BNO055 bno2 = Adafruit_BNO055(-1, 0x4);\\nLiquidCrystal_I2C lcd(0x5, 16, 2);\\n\\nvoid setup() {\\n  Serial.begin(115200);\\n\\n  // Initialize LCD\\n  lcd.init();\\n  lcd.backlight();\\n  lcd.setCursor(0, 0);\\n  lcd.print(\\u0022Initializing...\\u0022);\\n\\n  // Initialize MPU6050\\n  if (!mpu.begin(0x2)) {\\n    Serial.println(\\u0022Failed to find MPU6050 chip\\u0022);\\n    lcd.setCursor(0, 0);\\n    lcd.print(\\u0022MPU6050 Error\\u0022);\\n    while (1);\\n  }\\n\\n  // Initialize BNO055 sensors\\n  if (!bno1.begin()) {\\n    Serial.println(\\u0022Failed to find BNO055 (0x28)\\u0022);\\n    lcd.setCursor(0, 0);\\n    lcd.print(\\u0022BNO1 Error\\u0022);\\n    while (1);\\n  }\\n\\n  if (!bno2.begin()) {\\n    Serial.println(\\u0022Failed to find BNO055 (0x29)\\u0022);\\n    lcd.setCursor(0, 0);\\n    lcd.print(\\u0022BNO2 Error\\u0022);\\n    while (1);\\n  }\\n\\n  // Set external crystal use for BNO055 sensors\\n  bno1.setExtCrystalUse(true);\\n  bno2.setExtCrystalUse(true);\\n\\n  lcd.setCursor(0, 0);\\n  lcd.print(\\u0022Sensors Ready\\u0022);\\n  delay(500);\\n  lcd.clear();\\n}\\n\\nvoid loop() {\\n  // Get MPU6050 readings\\n  sensors_event_t a, g, temp;\\n  mpu.getEvent(\\u0026a, \\u0026g, \\u0026temp);\\n\\n  // Get BNO055 readings\\n  imu::Vector\\u003C3\\u003E euler1 = bno1.getVector(Adafruit_BNO055::VECTOR_EULER);\\n  imu::Vector\\u003C3\\u003E euler2 = bno2.getVector(Adafruit_BNO055::VECTOR_EULER);\\n\\n  // Display MPU6050 readings on LCD\\n  lcd.setCursor(0, 0);\\n  lcd.print(\\u0022MPU: \\u0022);\\n  lcd.print(a.acceleration.x, 1); // Display X acceleration\\n  lcd.print(\\u0022 \\u0022);\\n  lcd.print(temp.temperature, 1); // Display temperature\\n\\n  // Display BNO055 (first sensor) Euler angles on LCD\\n  lcd.setCursor(0, 1);\\n  lcd.print(\\u0022BNO1:\\u0022);\\n  lcd.print(euler1.x(), 1); // Display X Euler angle\\n  lcd.print(\\u0022 \\u0022);\\n  lcd.print(euler1.y(), 1); // Display Y Euler angle\\n\\n  delay(500);\\n\\n  // Update LCD for BNO055 (second sensor)\\n  lcd.setCursor(0, 0);\\n  lcd.print(\\u0022BNO2:\\u0022);\\n  lcd.print(euler2.x(), 1); // Display X Euler angle\\n  lcd.print(\\u0022 \\u0022);\\n  lcd.print(euler2.y(), 1); // Display Y Euler angle\\n\\n  delay(500);\\n}\\n\",\n  \"Comps\": {\n    \"1\": {\n      \"localId\": 0,\n      \"Highlight\": null,\n      \"GlobalId\": 1,\n      \"X\": 717,\n      \"Y\": 363,\n      \"zoomedX\": 293,\n      \"zoomedY\": 339,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {}\n    },\n    \"2\": {\n      \"localId\": 2,\n      \"Highlight\": null,\n      \"GlobalId\": 4,\n      \"X\": 514.5,\n      \"Y\": 446.5,\n      \"zoomedX\": 90.5,\n      \"zoomedY\": 422.5,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"motion\": {\n          \"type\": \"System.String\",\n          \"value\": \"Static\"\n        }\n      }\n    },\n    \"3\": {\n      \"localId\": 3,\n      \"Highlight\": null,\n      \"GlobalId\": 5,\n      \"X\": 900,\n      \"Y\": 198,\n      \"zoomedX\": 476,\n      \"zoomedY\": 174,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"motion\": {\n          \"type\": \"System.String\",\n          \"value\": \"Rotating\"\n        }\n      }\n    },\n    \"4\": {\n      \"localId\": 4,\n      \"Highlight\": null,\n      \"GlobalId\": 5,\n      \"X\": 595,\n      \"Y\": 216,\n      \"zoomedX\": 171,\n      \"zoomedY\": 192,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"motion\": {\n          \"type\": \"System.String\",\n          \"value\": \"Static\"\n        }\n      }\n    },\n    \"5\": {\n      \"localId\": 5,\n      \"Highlight\": null,\n      \"GlobalId\": 22,\n      \"X\": 1090,\n      \"Y\": 333,\n      \"zoomedX\": 666,\n      \"zoomedY\": 309,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"text\": {\n          \"type\": \"System.String\",\n          \"value\": \"\"\n        },\n        \"backlight\": {\n          \"type\": \"System.Boolean\",\n          \"value\": false\n        },\n        \"blink\": {\n          \"type\": \"System.Boolean\",\n          \"value\": false\n        },\n        \"cursor\": {\n          \"type\": \"System.Boolean\",\n          \"value\": false\n        },\n        \"cursorX\": {\n          \"type\": \"System.Int32\",\n          \"value\": 0\n        },\n        \"cursorY\": {\n          \"type\": \"System.Int32\",\n          \"value\": 0\n        }\n      }\n    }\n  }\n}"),
    new("Sensors and Outputs", Board.ArduinoUno, "sensors-and-outputs", "{\n  \"LocalId\": 6,\n  \"Code\": \"const int buzzerPin2 = 2;  // Signal pin for the buzzer\\nconst int buttonPin3 = 4;  // Button pin\\nint inputPin5 = 8;         // PIR sensor input pin\\nint pirState5 = LOW;       // PIR sensor initial state (no motion)\\nint val5 = 0;              // Variable for PIR sensor state\\n#define Sober6 120          // Max value for sober state\\n#define Drunk6 400          // Min value for drunk state\\n#define MQ3pin6 14          // MQ3 sensor pin\\nfloat sensorValue6;        // Variable to store MQ3 sensor value\\n\\nvoid setup() {\\n  pinMode(buzzerPin2, OUTPUT);  // Set buzzer pin as output\\n  pinMode(buttonPin3, INPUT);   // Set button pin as input\\n  Serial.begin(9600);           // Start serial communication\\n  pinMode(7, OUTPUT);           // Pin 7 for the LED (or other device)\\n  pinMode(inputPin5, INPUT);    // PIR sensor input pin\\n  Serial.println(\\u0022MQ3 warming up!\\u0022);\\n}\\n\\nvoid loop() {\\n  // Read MQ3 sensor\\n  sensorValue6 = analogRead(MQ3pin6); \\n  Serial.print(\\u0022Sensor Value: \\u0022);\\n  Serial.print(sensorValue6);\\n\\n  // Check if the MQ3 sensor is indicating drunk level\\n  if (sensorValue6 \\u003E= Drunk6) {\\n    Serial.println(\\u0022  |  Status: DRUNK\\u0022);\\n    digitalWrite(buzzerPin2, HIGH); // Turn on buzzer\\n    digitalWrite(7, HIGH);          // Turn on LED\\n  } else if (sensorValue6 \\u003E= Sober6 \\u0026\\u0026 sensorValue6 \\u003C Drunk6) {\\n    Serial.println(\\u0022  |  Status: Drinking but within legal limits\\u0022);\\n    digitalWrite(buzzerPin2, HIGH); // Turn on buzzer\\n    digitalWrite(7, HIGH);          // Turn on LED\\n  } else {\\n    Serial.println(\\u0022  |  Status: Stone Cold Sober\\u0022);\\n    digitalWrite(buzzerPin2, LOW);  // Turn off buzzer\\n    digitalWrite(7, LOW);           // Turn off LED\\n  }\\n\\n  // Check if the button is pressed\\n  int buttonState3 = digitalRead(buttonPin3); \\n  if (buttonState3 == HIGH) {\\n    Serial.println(\\u0022Button is pressed!\\u0022);\\n    digitalWrite(buzzerPin2, HIGH);  // Turn on buzzer\\n    digitalWrite(7, HIGH);           // Turn on LED\\n  }\\n\\n  // Check motion sensor\\n  val5 = digitalRead(inputPin5); // Read PIR sensor\\n  if (val5 == HIGH) { // Motion detected\\n    if (pirState5 == LOW) {\\n      Serial.println(\\u0022Motion detected!\\u0022);\\n      pirState5 = HIGH;\\n      digitalWrite(buzzerPin2, HIGH);  // Turn on buzzer\\n      digitalWrite(7, HIGH);           // Turn on LED\\n    }\\n  } else {  // No motion\\n    if (pirState5 == HIGH) {\\n      Serial.println(\\u0022Motion ended!\\u0022);\\n      pirState5 = LOW;\\n      digitalWrite(buzzerPin2, LOW);   // Turn off buzzer\\n      digitalWrite(7, LOW);            // Turn off LED\\n    }\\n  }\\n\\n  delay(100); // Short delay to avoid spamming the serial monitor\\n}\\n\",\n  \"Comps\": {\n    \"1\": {\n      \"localId\": 0,\n      \"Highlight\": null,\n      \"Controller\": null,\n      \"GlobalId\": 1,\n      \"X\": 829,\n      \"Y\": 219,\n      \"zoomedX\": 524,\n      \"zoomedY\": 373,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {}\n    },\n    \"2\": {\n      \"localId\": 2,\n      \"Highlight\": null,\n      \"GlobalId\": 30,\n      \"X\": 904.75,\n      \"Y\": 516.423,\n      \"zoomedX\": 599.75,\n      \"zoomedY\": 670.423,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {}\n    },\n    \"3\": {\n      \"localId\": 3,\n      \"Highlight\": null,\n      \"GlobalId\": 29,\n      \"X\": 1092.5,\n      \"Y\": -35.5,\n      \"zoomedX\": 787.5,\n      \"zoomedY\": 118.5,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"pushed\": {\n          \"type\": \"System.String\",\n          \"value\": \"Released\"\n        }\n      }\n    },\n    \"4\": {\n      \"localId\": 4,\n      \"Highlight\": null,\n      \"GlobalId\": 18,\n      \"X\": 1157,\n      \"Y\": 499,\n      \"zoomedX\": 852,\n      \"zoomedY\": 653,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"color\": {\n          \"type\": \"System.String\",\n          \"value\": \"red\"\n        }\n      }\n    },\n    \"5\": {\n      \"localId\": 5,\n      \"Highlight\": null,\n      \"GlobalId\": 15,\n      \"X\": 855.5,\n      \"Y\": -12.5,\n      \"zoomedX\": 550.5,\n      \"zoomedY\": 141.5,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"ismotiondetected\": {\n          \"type\": \"System.Double\",\n          \"value\": 0\n        },\n        \"triggermode\": {\n          \"type\": \"System.Double\",\n          \"value\": 0\n        },\n        \"timedelayseconds\": {\n          \"type\": \"System.Double\",\n          \"value\": 1\n        }\n      }\n    },\n    \"6\": {\n      \"localId\": 6,\n      \"Highlight\": null,\n      \"GlobalId\": 9,\n      \"X\": 580.5,\n      \"Y\": -1.5,\n      \"zoomedX\": 275.5,\n      \"zoomedY\": 152.5,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"alcohol\": {\n          \"type\": \"System.Double\",\n          \"value\": 119\n        }\n      }\n    }\n  }\n}"),
    new("Control Servos with IR", Board.ArduinoUno, "control-servos-with-ir", "{\n  \"LocalId\": 8,\n  \"Code\": \"#include \\u003CServo.h\\u003E\\n#include \\u003CIRremote.hpp\\u003E\\n\\nServo myservo2;  \\nServo myservo3;  \\nServo myservo4;  \\nServo myservo5;  \\nServo myservo6;  \\nServo myservo7;  \\nint IRPIN = 2;\\n\\nvoid setup() {\\n  myservo2.attach(3);\\n  myservo3.attach(5);\\n  myservo4.attach(6);\\n  myservo5.attach(9);\\n  myservo6.attach(10);\\n  myservo7.attach(11);\\n  Serial.begin(9600);\\n  Serial.println(\\u0022Enabling IRin\\u0022);\\n\\n  IrReceiver.begin(IRPIN, ENABLE_LED_FEEDBACK);\\n  Serial.println(\\u0022Enabled IRin\\u0022);\\n}\\n\\nvoid loop() {\\n  if (IrReceiver.decode()) {\\n    // Print the received IR command in HEX for debugging\\n    Serial.println(IrReceiver.decodedIRData.command, HEX);\\n\\n    int pos = IrReceiver.decodedIRData.command;\\n\\n    // Update servo positions\\n    myservo2.write(pos);\\n    myservo3.write(pos);\\n    myservo4.write(pos);\\n    myservo5.write(pos);\\n    myservo6.write(pos);\\n    myservo7.write(pos);\\n\\n    // Resume receiving the next IR signal\\n    IrReceiver.resume();\\n  }\\n  delay(100);  // Small delay to prevent overload\\n}\\n\",\n  \"Comps\": {\n    \"1\": {\n      \"localId\": 0,\n      \"Highlight\": null,\n      \"GlobalId\": 1,\n      \"X\": 834,\n      \"Y\": 512,\n      \"zoomedX\": 235,\n      \"zoomedY\": 551,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {}\n    },\n    \"2\": {\n      \"localId\": 2,\n      \"Highlight\": null,\n      \"GlobalId\": 23,\n      \"X\": 672.5,\n      \"Y\": 53,\n      \"zoomedX\": 73.5,\n      \"zoomedY\": 92,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"angle\": {\n          \"type\": \"System.Int32\",\n          \"value\": 0\n        }\n      }\n    },\n    \"3\": {\n      \"localId\": 3,\n      \"Highlight\": null,\n      \"GlobalId\": 23,\n      \"X\": 672.5,\n      \"Y\": 158,\n      \"zoomedX\": 73.5,\n      \"zoomedY\": 197,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"angle\": {\n          \"type\": \"System.Int32\",\n          \"value\": 0\n        }\n      }\n    },\n    \"4\": {\n      \"localId\": 4,\n      \"Highlight\": null,\n      \"GlobalId\": 23,\n      \"X\": 676.5,\n      \"Y\": -52,\n      \"zoomedX\": 77.5,\n      \"zoomedY\": -13,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"angle\": {\n          \"type\": \"System.Int32\",\n          \"value\": 0\n        }\n      }\n    },\n    \"5\": {\n      \"localId\": 5,\n      \"Highlight\": null,\n      \"GlobalId\": 23,\n      \"X\": 1059.5,\n      \"Y\": 176,\n      \"zoomedX\": 460.5,\n      \"zoomedY\": 215,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"angle\": {\n          \"type\": \"System.Int32\",\n          \"value\": 0\n        }\n      }\n    },\n    \"6\": {\n      \"localId\": 6,\n      \"Highlight\": null,\n      \"GlobalId\": 23,\n      \"X\": 1059.5,\n      \"Y\": 70,\n      \"zoomedX\": 460.5,\n      \"zoomedY\": 109,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"angle\": {\n          \"type\": \"System.Int32\",\n          \"value\": 0\n        }\n      }\n    },\n    \"7\": {\n      \"localId\": 7,\n      \"Highlight\": null,\n      \"GlobalId\": 23,\n      \"X\": 1061.5,\n      \"Y\": -54,\n      \"zoomedX\": 462.5,\n      \"zoomedY\": -15,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"angle\": {\n          \"type\": \"System.Int32\",\n          \"value\": 0\n        }\n      }\n    },\n    \"8\": {\n      \"localId\": 8,\n      \"Highlight\": null,\n      \"GlobalId\": 16,\n      \"X\": 1385.5,\n      \"Y\": 660,\n      \"zoomedX\": 786.5,\n      \"zoomedY\": 699,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {}\n    }\n  }\n}"),
    new("Sensor Stress Test", Board.ArduinoUno, "sensor-stress-test", "{\n  \"LocalId\": 7,\n  \"Code\": \"#include \\u003CServo.h\\u003E\\n#include \\u003CWire.h\\u003E\\n#include \\u003CTFLI2C.h\\u003E\\n#include \\u003CAdafruit_Sensor.h\\u003E\\n#include \\u003CAdafruit_ADXL345_U.h\\u003E\\n\\nint digitalPin2 = 2; // KY-024 Hall effect sensor digital output\\nint analogPin2 = 14; // KY-024 Hall effect sensor analog output\\nint digitalVal2;     // variable for digital readings\\nint analogVal2;      // variable for analog readings\\nint ledPin = 4;      // Pin for the LED\\nint servoPin = 3;    // PWM pin for the servo\\nServo myServo;       // Create a Servo object\\nint trigPin = 8;     // HC-SR04 Trigger Pin\\nint echoPin = 7;     // HC-SR04 Echo Pin\\n\\nTFLI2C lidar;\\nAdafruit_ADXL345_Unified accel = Adafruit_ADXL345_Unified(12345);\\n\\nvoid setup()\\n{\\n    pinMode(digitalPin2, INPUT); // Set digital pin as input for magnetic field detection\\n    pinMode(analogPin2, INPUT);  // Set analog pin as input for magnetic field strength\\n    pinMode(ledPin, OUTPUT);     // Setup LED pin as output\\n    pinMode(trigPin, OUTPUT);    // Set the trigPin as an OUTPUT\\n    pinMode(echoPin, INPUT);     // Set the echoPin as an INPUT\\n\\n    myServo.attach(servoPin); // Attach the servo to pin 3\\n    Serial.begin(9600);       // Initialize serial communication\\n    accel.begin(0x7); // Begin ADXL345 on I2C address 0x7\\n    accel.setRange(ADXL345_RANGE_4_G);\\n    delay(100); // Wait for the sensor to initialize\\n}\\n\\nvoid loop()\\n{\\n    // Read the digital output to detect magnetic field presence\\n    digitalVal2 = digitalRead(digitalPin2);\\n    Serial.print(\\u0022KY-024 digital value: \\u0022);\\n    Serial.println(digitalVal2); // Print digital detection status\\n\\n    // Read the analog output to get magnetic field strength in Gauss\\n    analogVal2 = analogRead(analogPin2);\\n    float voltage2 = analogVal2 * (5.0 / 1023.0); // Convert analog reading to voltage\\n    Serial.print(\\u0022KY-024 analog voltage: \\u0022);\\n    Serial.println(voltage2);\\n\\n    // When magnetic field is detected\\n    if (digitalVal2 == HIGH)\\n    {\\n        digitalWrite(ledPin, HIGH); // Turn LED on\\n        sweepServo();               // Sweep the servo\\n    }\\n    else\\n    {\\n        digitalWrite(ledPin, LOW); // Turn LED off\\n        myServo.write(90);         // Set the servo to neutral (90 degrees)\\n    }\\n\\n    // Get the distance reading from the HC-SR04\\n    long distance = getDistance();\\n    Serial.print(\\u0022HC-SR04 Distance: \\u0022);\\n    Serial.print(distance);\\n    Serial.println(\\u0022 cm\\u0022);\\n\\n    // Get the distance reading from the TF-Luna LiDAR\\n    int16_t tfDist = 0;                         // distance in centimeters\\n    int16_t tfFlux = 0;                         // signal quality in arbitrary units\\n    int16_t tfTemp = 0;                         // temperature in 0.01 degree Celsius\\n    lidar.getData(tfDist, tfFlux, tfTemp, 0x6); // Get distance from the LiDAR sensor\\n    Serial.print(\\u0022TF-Luna LiDAR Distance: \\u0022);\\n    Serial.print(tfDist);\\n    Serial.println(\\u0022 cm\\u0022);\\n\\n    // Read ADXL readings\\n    sensors_event_t event; \\n    accel.getEvent(\\u0026event);\\n    Serial.print(\\u0022X: \\u0022); Serial.print(event.acceleration.x); Serial.print(\\u0022  \\u0022);\\n    Serial.print(\\u0022Y: \\u0022); Serial.print(event.acceleration.y); Serial.print(\\u0022  \\u0022);\\n    Serial.print(\\u0022Z: \\u0022); Serial.print(event.acceleration.z); Serial.print(\\u0022  \\u0022);Serial.println(\\u0022m/s^2 \\u0022);\\n\\n    delay(100); // Small delay for stability\\n}\\n\\n//  Function to sweep the servo forward and backward 180 degrees\\nvoid sweepServo()\\n{\\n    // Sweep forward from 0 to 180 degrees\\n    for (int angle = 0; angle \\u003C= 180; angle\\u002B\\u002B)\\n    {\\n        myServo.write(angle); // Set the servo to the current angle\\n        delay(1);             // Wait for the servo to reach the position\\n    }\\n\\n    // Sweep backward from 180 to 0 degrees\\n    for (int angle = 180; angle \\u003E= 0; angle--)\\n    {\\n        myServo.write(angle); // Set the servo to the current angle\\n        delay(1);             // Wait for the servo to reach the position\\n    }\\n}\\n\\n//  Function to get the distance from the HC-SR04 sensor\\nlong getDistance()\\n{\\n    // Send a 10 microsecond pulse to trigger the sensor\\n    digitalWrite(trigPin, LOW);  // Ensure the trigger is low\\n    delayMicroseconds(2);        // Wait for a short time\\n    digitalWrite(trigPin, HIGH); // Send the pulse\\n    delayMicroseconds(10);       // Wait for 10 microseconds\\n    digitalWrite(trigPin, LOW);  // Stop sending the pulse\\n\\n    // Measure the time it takes for the echo to return\\n    long duration = pulseIn(echoPin, HIGH);\\n\\n    // Calculate the distance: duration / 2 because the pulse travels to the object and back\\n    long distance = duration * 0.0344 / 2; // Speed of sound is 0.0344 cm/us\\n\\n    return distance;\\n}\\n\",\n  \"Comps\": {\n    \"1\": {\n      \"localId\": 0,\n      \"Highlight\": null,\n      \"GlobalId\": 1,\n      \"X\": 273,\n      \"Y\": 358,\n      \"zoomedX\": 456,\n      \"zoomedY\": 430,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {}\n    },\n    \"2\": {\n      \"localId\": 2,\n      \"Highlight\": null,\n      \"GlobalId\": 12,\n      \"X\": 638.5,\n      \"Y\": 198.5,\n      \"zoomedX\": 821.5,\n      \"zoomedY\": 270.5,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"gauss\": {\n          \"type\": \"System.Double\",\n          \"value\": 0\n        },\n        \"ismagneticfielddetected\": {\n          \"type\": \"System.Double\",\n          \"value\": 0\n        }\n      }\n    },\n    \"3\": {\n      \"localId\": 3,\n      \"Highlight\": null,\n      \"GlobalId\": 18,\n      \"X\": 666,\n      \"Y\": 501,\n      \"zoomedX\": 849,\n      \"zoomedY\": 573,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"color\": {\n          \"type\": \"System.String\",\n          \"value\": \"red\"\n        }\n      }\n    },\n    \"4\": {\n      \"localId\": 4,\n      \"Highlight\": null,\n      \"GlobalId\": 23,\n      \"X\": 14.5,\n      \"Y\": 483,\n      \"zoomedX\": 197.5,\n      \"zoomedY\": 555,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"angle\": {\n          \"type\": \"System.Int32\",\n          \"value\": 0\n        }\n      }\n    },\n    \"5\": {\n      \"localId\": 5,\n      \"Highlight\": null,\n      \"GlobalId\": 8,\n      \"X\": 428,\n      \"Y\": 113.5,\n      \"zoomedX\": 611,\n      \"zoomedY\": 185.5,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"distance\": {\n          \"type\": \"System.Double\",\n          \"value\": 20\n        }\n      }\n    },\n    \"6\": {\n      \"localId\": 6,\n      \"Highlight\": null,\n      \"GlobalId\": 6,\n      \"X\": 53.5,\n      \"Y\": 222.5,\n      \"zoomedX\": 236.5,\n      \"zoomedY\": 294.5,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"distance\": {\n          \"type\": \"System.Double\",\n          \"value\": 50\n        }\n      }\n    },\n    \"7\": {\n      \"localId\": 7,\n      \"Highlight\": null,\n      \"GlobalId\": 3,\n      \"X\": 205.5,\n      \"Y\": 141.5,\n      \"zoomedX\": 388.5,\n      \"zoomedY\": 213.5,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"motion\": {\n          \"type\": \"System.String\",\n          \"value\": \"Constant Acceleration\"\n        }\n      }\n    }\n  }\n}")
];

}