@inject BoardService BoardService

<div style="background-color: #fff; border: 1px solid #ccc; border-radius: 5px; padding: 1rem">
    <h1 style="font-size: 1.5rem">Select an example to load</h1>
    <div style="display: grid; grid-template-columns: repeat(4, 1fr); grid-auto-rows: auto; grid-gap: 1rem">
        @foreach (var example in _examples)
        {
        <div style="border: 1px solid #ccc; border-radius: 5px; box-shadow: rgba(100, 100, 111, 0.2) 0px 7px 29px 0px;" aria-roledescription="button" @onclick="() => HandleClick(example)">
            <h2 style="font-size: 1.25rem">
                @example.Title
            </h2>
        </div>
        }
    </div>
</div>

@code {

private record Example(string Title, Board Board, string Json);

private void HandleClick(Example example)
{
    BoardService.Board = example.Board;
    Pages.Index.App.SetupBenchFromJsonString(example.Json);
}


private List<Example> _examples =
[
new("Multiple Thermocouples", Board.ArduinoUno,  "{\n  \"LocalId\": 7,\n  \"Code\": \"#include \\u003CMAX6675.h\\u003E\\n#include \\u003CLiquidCrystal_I2C.h\\u003E\\n\\n// Thermocouple pins\\n#define CS_PIN2 2\\n#define CS_PIN3 4\\n#define CS_PIN4 7\\n#define CS_PIN5 8\\n#define CS_PIN6 3\\n\\n// Thermocouple objects\\nMAX6675 tcouple2(CS_PIN2);\\nMAX6675 tcouple3(CS_PIN3);\\nMAX6675 tcouple4(CS_PIN4);\\nMAX6675 tcouple5(CS_PIN5);\\nMAX6675 tcouple6(CS_PIN6);\\n\\n// LCD object (adjust the I2C address if needed)\\nLiquidCrystal_I2C lcd(0x7, 16, 2);\\n\\nvoid setup() {\\n    Serial.begin(9600);\\n\\n    // Initialize the LCD\\n    lcd.init();\\n    lcd.backlight();\\n    lcd.print(\\u0022Initializing...\\u0022);\\n    delay(500); // Allow time to read the welcome message\\n    lcd.clear();\\n}\\n\\nvoid loop() {\\n    // Read temperatures from each thermocouple\\n    float celsius2 = tcouple2.readTempC();\\n    float celsius3 = tcouple3.readTempC();\\n    float celsius4 = tcouple4.readTempC();\\n    float celsius5 = tcouple5.readTempC();\\n    float celsius6 = tcouple6.readTempC();\\n\\n    // Display temperatures on Serial Monitor\\n    Serial.print(\\u0022T2: \\u0022); Serial.print(celsius2); Serial.println(\\u0022 C\\u0022);\\n    Serial.print(\\u0022T3: \\u0022); Serial.print(celsius3); Serial.println(\\u0022 C\\u0022);\\n    Serial.print(\\u0022T4: \\u0022); Serial.print(celsius4); Serial.println(\\u0022 C\\u0022);\\n    Serial.print(\\u0022T5: \\u0022); Serial.print(celsius5); Serial.println(\\u0022 C\\u0022);\\n    Serial.print(\\u0022T6: \\u0022); Serial.print(celsius6); Serial.println(\\u0022 C\\u0022);\\n\\n    // Display temperatures on the LCD\\n    lcd.clear();\\n    lcd.setCursor(0, 0);\\n    lcd.print(\\u0022T2: \\u0022); lcd.print(celsius2, 1); lcd.print(\\u0022C\\u0022);\\n    lcd.setCursor(0, 1);\\n    lcd.print(\\u0022T3: \\u0022); lcd.print(celsius3, 1); lcd.print(\\u0022C\\u0022);\\n    delay(500); // Show first two readings\\n\\n    lcd.clear();\\n    lcd.setCursor(0, 0);\\n    lcd.print(\\u0022T4: \\u0022); lcd.print(celsius4, 1); lcd.print(\\u0022C\\u0022);\\n    lcd.setCursor(0, 1);\\n    lcd.print(\\u0022T5: \\u0022); lcd.print(celsius5, 1); lcd.print(\\u0022C\\u0022);\\n    delay(500); // Show next two readings\\n\\n    lcd.clear();\\n    lcd.setCursor(0, 0);\\n    lcd.print(\\u0022T6: \\u0022); lcd.print(celsius6, 1); lcd.print(\\u0022C\\u0022);\\n    delay(500); // Show final reading\\n}\\n\",\n  \"Comps\": {\n    \"1\": {\n      \"localId\": 0,\n      \"Highlight\": null,\n      \"GlobalId\": 1,\n      \"X\": 790,\n      \"Y\": 428,\n      \"zoomedX\": 351,\n      \"zoomedY\": 367,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {}\n    },\n    \"2\": {\n      \"localId\": 2,\n      \"Highlight\": null,\n      \"GlobalId\": 14,\n      \"X\": 544,\n      \"Y\": 236.5,\n      \"zoomedX\": 105,\n      \"zoomedY\": 175.5,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"temperature\": {\n          \"type\": \"System.Double\",\n          \"value\": 20\n        }\n      }\n    },\n    \"3\": {\n      \"localId\": 3,\n      \"Highlight\": null,\n      \"GlobalId\": 14,\n      \"X\": 704,\n      \"Y\": 126.5,\n      \"zoomedX\": 265,\n      \"zoomedY\": 65.5,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"temperature\": {\n          \"type\": \"System.Double\",\n          \"value\": 20\n        }\n      }\n    },\n    \"4\": {\n      \"localId\": 4,\n      \"Highlight\": null,\n      \"GlobalId\": 14,\n      \"X\": 1246,\n      \"Y\": 189.5,\n      \"zoomedX\": 807,\n      \"zoomedY\": 128.5,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"temperature\": {\n          \"type\": \"System.Double\",\n          \"value\": 20\n        }\n      }\n    },\n    \"5\": {\n      \"localId\": 5,\n      \"Highlight\": null,\n      \"GlobalId\": 14,\n      \"X\": 1062,\n      \"Y\": 127.5,\n      \"zoomedX\": 623,\n      \"zoomedY\": 66.5,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"temperature\": {\n          \"type\": \"System.Double\",\n          \"value\": 20\n        }\n      }\n    },\n    \"6\": {\n      \"localId\": 6,\n      \"Highlight\": null,\n      \"GlobalId\": 14,\n      \"X\": 545,\n      \"Y\": 497.5,\n      \"zoomedX\": 106,\n      \"zoomedY\": 436.5,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"temperature\": {\n          \"type\": \"System.Double\",\n          \"value\": 20\n        }\n      }\n    },\n    \"7\": {\n      \"localId\": 7,\n      \"Highlight\": null,\n      \"GlobalId\": 22,\n      \"X\": 1186,\n      \"Y\": 537,\n      \"zoomedX\": 747,\n      \"zoomedY\": 476,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"text\": {\n          \"type\": \"System.String\",\n          \"value\": \"\"\n        },\n        \"backlight\": {\n          \"type\": \"System.Boolean\",\n          \"value\": false\n        },\n        \"blink\": {\n          \"type\": \"System.Boolean\",\n          \"value\": false\n        },\n        \"cursor\": {\n          \"type\": \"System.Boolean\",\n          \"value\": false\n        },\n        \"cursorX\": {\n          \"type\": \"System.Int32\",\n          \"value\": 0\n        },\n        \"cursorY\": {\n          \"type\": \"System.Int32\",\n          \"value\": 0\n        }\n      }\n    }\n  }\n}"),
new("Multiple I2C Devices", Board.ArduinoUno, "{\n  \"LocalId\": 5,\n  \"Code\": \"#include \\u003CAdafruit_MPU6050.h\\u003E\\n#include \\u003CAdafruit_Sensor.h\\u003E\\n#include \\u003CWire.h\\u003E\\n#include \\u003CAdafruit_BNO055.h\\u003E\\n#include \\u003Cutility/imumaths.h\\u003E\\n#include \\u003CLiquidCrystal_I2C.h\\u003E\\n\\nAdafruit_MPU6050 mpu;\\nAdafruit_BNO055 bno1 = Adafruit_BNO055(-1, 0x3);\\nAdafruit_BNO055 bno2 = Adafruit_BNO055(-1, 0x4);\\nLiquidCrystal_I2C lcd(0x5, 16, 2);\\n\\nvoid setup() {\\n  Serial.begin(115200);\\n\\n  // Initialize LCD\\n  lcd.init();\\n  lcd.backlight();\\n  lcd.setCursor(0, 0);\\n  lcd.print(\\u0022Initializing...\\u0022);\\n\\n  // Initialize MPU6050\\n  if (!mpu.begin(0x2)) {\\n    Serial.println(\\u0022Failed to find MPU6050 chip\\u0022);\\n    lcd.setCursor(0, 0);\\n    lcd.print(\\u0022MPU6050 Error\\u0022);\\n    while (1);\\n  }\\n\\n  // Initialize BNO055 sensors\\n  if (!bno1.begin()) {\\n    Serial.println(\\u0022Failed to find BNO055 (0x28)\\u0022);\\n    lcd.setCursor(0, 0);\\n    lcd.print(\\u0022BNO1 Error\\u0022);\\n    while (1);\\n  }\\n\\n  if (!bno2.begin()) {\\n    Serial.println(\\u0022Failed to find BNO055 (0x29)\\u0022);\\n    lcd.setCursor(0, 0);\\n    lcd.print(\\u0022BNO2 Error\\u0022);\\n    while (1);\\n  }\\n\\n  // Set external crystal use for BNO055 sensors\\n  bno1.setExtCrystalUse(true);\\n  bno2.setExtCrystalUse(true);\\n\\n  lcd.setCursor(0, 0);\\n  lcd.print(\\u0022Sensors Ready\\u0022);\\n  delay(500);\\n  lcd.clear();\\n}\\n\\nvoid loop() {\\n  // Get MPU6050 readings\\n  sensors_event_t a, g, temp;\\n  mpu.getEvent(\\u0026a, \\u0026g, \\u0026temp);\\n\\n  // Get BNO055 readings\\n  imu::Vector\\u003C3\\u003E euler1 = bno1.getVector(Adafruit_BNO055::VECTOR_EULER);\\n  imu::Vector\\u003C3\\u003E euler2 = bno2.getVector(Adafruit_BNO055::VECTOR_EULER);\\n\\n  // Display MPU6050 readings on LCD\\n  lcd.setCursor(0, 0);\\n  lcd.print(\\u0022MPU: \\u0022);\\n  lcd.print(a.acceleration.x, 1); // Display X acceleration\\n  lcd.print(\\u0022 \\u0022);\\n  lcd.print(temp.temperature, 1); // Display temperature\\n\\n  // Display BNO055 (first sensor) Euler angles on LCD\\n  lcd.setCursor(0, 1);\\n  lcd.print(\\u0022BNO1:\\u0022);\\n  lcd.print(euler1.x(), 1); // Display X Euler angle\\n  lcd.print(\\u0022 \\u0022);\\n  lcd.print(euler1.y(), 1); // Display Y Euler angle\\n\\n  delay(500);\\n\\n  // Update LCD for BNO055 (second sensor)\\n  lcd.setCursor(0, 0);\\n  lcd.print(\\u0022BNO2:\\u0022);\\n  lcd.print(euler2.x(), 1); // Display X Euler angle\\n  lcd.print(\\u0022 \\u0022);\\n  lcd.print(euler2.y(), 1); // Display Y Euler angle\\n\\n  delay(500);\\n}\\n\",\n  \"Comps\": {\n    \"1\": {\n      \"localId\": 0,\n      \"Highlight\": null,\n      \"GlobalId\": 1,\n      \"X\": 717,\n      \"Y\": 363,\n      \"zoomedX\": 293,\n      \"zoomedY\": 339,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {}\n    },\n    \"2\": {\n      \"localId\": 2,\n      \"Highlight\": null,\n      \"GlobalId\": 4,\n      \"X\": 514.5,\n      \"Y\": 446.5,\n      \"zoomedX\": 90.5,\n      \"zoomedY\": 422.5,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"motion\": {\n          \"type\": \"System.String\",\n          \"value\": \"Static\"\n        }\n      }\n    },\n    \"3\": {\n      \"localId\": 3,\n      \"Highlight\": null,\n      \"GlobalId\": 5,\n      \"X\": 900,\n      \"Y\": 198,\n      \"zoomedX\": 476,\n      \"zoomedY\": 174,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"motion\": {\n          \"type\": \"System.String\",\n          \"value\": \"Rotating\"\n        }\n      }\n    },\n    \"4\": {\n      \"localId\": 4,\n      \"Highlight\": null,\n      \"GlobalId\": 5,\n      \"X\": 595,\n      \"Y\": 216,\n      \"zoomedX\": 171,\n      \"zoomedY\": 192,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"motion\": {\n          \"type\": \"System.String\",\n          \"value\": \"Static\"\n        }\n      }\n    },\n    \"5\": {\n      \"localId\": 5,\n      \"Highlight\": null,\n      \"GlobalId\": 22,\n      \"X\": 1090,\n      \"Y\": 333,\n      \"zoomedX\": 666,\n      \"zoomedY\": 309,\n      \"midSignal\": 0,\n      \"counter\": 0,\n      \"Wbuffer\": 0,\n      \"RegAddr\": 0,\n      \"byteIndex\": 0,\n      \"timer\": 0,\n      \"CompParams\": {\n        \"text\": {\n          \"type\": \"System.String\",\n          \"value\": \"\"\n        },\n        \"backlight\": {\n          \"type\": \"System.Boolean\",\n          \"value\": false\n        },\n        \"blink\": {\n          \"type\": \"System.Boolean\",\n          \"value\": false\n        },\n        \"cursor\": {\n          \"type\": \"System.Boolean\",\n          \"value\": false\n        },\n        \"cursorX\": {\n          \"type\": \"System.Int32\",\n          \"value\": 0\n        },\n        \"cursorY\": {\n          \"type\": \"System.Int32\",\n          \"value\": 0\n        }\n      }\n    }\n  }\n}")
];

}