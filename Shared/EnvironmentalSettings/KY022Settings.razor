<div style="display: flex; flex-direction: column; align-items: center; justify-content: center">
    <h2 style="font-size: 20px">IR Remote</h2>
    <div class="remote">
        <div>
            <button @onclick="() => SetCommand(1)">1</button>
            <button @onclick="() => SetCommand(2)">2</button>
            <button @onclick="() => SetCommand(3)">3</button>
        </div>
        <div>
            <button @onclick="() => SetCommand(4)">4</button>
            <button @onclick="() => SetCommand(5)">5</button>
            <button @onclick="() => SetCommand(6)">6</button>
        </div>
        <div>
            <button @onclick="() => SetCommand(7)">7</button>
            <button @onclick="() => SetCommand(8)">8</button>
            <button @onclick="() => SetCommand(9)">9</button>
        </div>
        <div>
            <button style="font-size: 1.5rem" class="red" @onclick="() => SetCommand(10)">*</button>
            <button @onclick="() => SetCommand(0)">0</button>
            <button @onclick="() => SetCommand(11)" class="red">#</button>
        </div>
        <div>
            <button class="blue" @onclick="() => SetCommand(12)">▲</button>
        </div>
        <div>
            <button class="blue" @onclick="() => SetCommand(13)">◀</button>
            <button class="red" style="width: 35px" @onclick="() => SetCommand(14)">OK</button>
            <button class="blue" @onclick="() => SetCommand(15)">▶</button>
        </div>
        <div>
            <button class="blue" @onclick="() => SetCommand(16)">▼</button>
        </div>
    </div>
</div>

@code {
    [Parameter] public IJSObjectReference? Controller { get; set; }

    private async Task SetCommand(int command)
    {
        if (Controller != null)
            await Controller.InvokeVoidAsync("setCommand", command);
    }

}

