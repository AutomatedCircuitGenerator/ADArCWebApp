<div class="comp-container">
	<InputText @bind-Value="searchText" contenteditable="false"></InputText>
	<div class="card-wrapper">
		@foreach (Directory d1 in dir.subDirectories)
		{
			<button class="directory-button level-1" @onclick="@(e => d1.isHidden = !d1.isHidden)">
				<svg transform="rotate(@(d1.isHidden ? -90 : 0))" focusable="false" width="1em" height="1em" fill="black" style="pointer-events: none;" xmlns="http://www.w3.org/2000/svg" class="icon" viewBox="0 0 1024 1024"><path d="M690 405h-46.9c-10.2 0-19.9 4.9-25.9 13.2L512 563.6 406.8 418.2c-6-8.3-15.6-13.2-25.9-13.2H334c-6.5 0-10.3 7.4-6.5 12.7l178 246c3.2 4.4 9.7 4.4 12.9 0l178-246c3.9-5.3.1-12.7-6.4-12.7z"></path><path d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"></path></svg>
				<span>@d1.name</span>
			</button>
			<div class="indent" hidden="@d1.isHidden">
				@if (d1.subDirectories.Count > 0)
				{
					@foreach (Directory d2 in d1.subDirectories)
					{
						<button class="directory-button level-2" @onclick="@(e => d2.isHidden = !d2.isHidden)">
							<svg transform="rotate(@(d2.isHidden ? -90 : 0))" focusable="false" width="1em" height="1em" fill="black" style="pointer-events: none;" xmlns="http://www.w3.org/2000/svg" class="icon" viewBox="0 0 1024 1024"><path d="M690 405h-46.9c-10.2 0-19.9 4.9-25.9 13.2L512 563.6 406.8 418.2c-6-8.3-15.6-13.2-25.9-13.2H334c-6.5 0-10.3 7.4-6.5 12.7l178 246c3.2 4.4 9.7 4.4 12.9 0l178-246c3.9-5.3.1-12.7-6.4-12.7z"></path><path d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"></path></svg>
							<span>@d2.name</span>
						</button>
						<div class="indent" hidden="@d2.isHidden">
							@if (d2.subDirectories.Count > 0)
							{
								@foreach (Directory d3 in d2.subDirectories)
								{
									<button class="directory-button level-3" @onclick="@(e => d3.isHidden = !d3.isHidden)">
										<svg transform="rotate(@(d3.isHidden ? -90 : 0))" focusable="false" width="1em" height="1em" fill="black" style="pointer-events: none;" xmlns="http://www.w3.org/2000/svg" class="icon" viewBox="0 0 1024 1024"><path d="M690 405h-46.9c-10.2 0-19.9 4.9-25.9 13.2L512 563.6 406.8 418.2c-6-8.3-15.6-13.2-25.9-13.2H334c-6.5 0-10.3 7.4-6.5 12.7l178 246c3.2 4.4 9.7 4.4 12.9 0l178-246c3.9-5.3.1-12.7-6.4-12.7z"></path><path d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"></path></svg>
										<span>@d3.name</span>
									</button>
									<div class="indent" hidden="@d3.isHidden">
										<div class="col-layout">
											@foreach (ComponentCard card in d3.contents)
											{
												<ComponentCard name="@card.name"></ComponentCard>
											}
										</div>
									</div>
								}
							}
							else
							{
								<div class="col-layout">
									@foreach (ComponentCard card in d2.contents)
									{
										<ComponentCard name="@card.name"></ComponentCard>
									}
								</div>
							}
						</div>
					}
				}
				else
				{
					<div class="col-layout">
						@foreach (ComponentCard card in d1.contents)
						{
							<ComponentCard name="@card.name"></ComponentCard>
						}
					</div>
				}
			</div>
		}
	</div>
</div>

@code {
	string? searchText;

	private Directory _dir = new Directory("notready", new List<Directory>());

	Directory dir
	{
		get
		{
			if (_dir.name == "notready")
			{
				_dir = getDirectory();
			}
			return _dir;
		}
	}



	/*
		* Create the directory structure of the component pane based off the directory information in the components.
		* May not be performant.
		*
		*/
	private Directory getDirectory()
	{
		Console.WriteLine("refresh Directories");       //make sure this doesn't happen too often.

		Directory ret = new("main", new List<Directory>());

		foreach (ComponentData data in ComponentDeclarations.components.Values)
		{
			string path = data.properties["directoryPath"].ToString();

			if (path == null)   //throw them out if they don't have a path
			{
				throw new Exception("Badly formed component in namespace: " + data.properties["name"]);
			}

			string[] pathSplit = path.Split("/");   //split the path into folder names

			Directory add = ret;

			for (int i = 0; i < pathSplit.Length; i++)  //navigate through the path, adding new folders as necessary
			{
				string dir = pathSplit[i];
				if (!add.subDirectories.Any(d => d.name == dir))
				{
					if (i == pathSplit.Length - 1)
					{
						add.subDirectories.Add(new Directory(dir, new List<ComponentCard>()));
						add = add.subDirectories.Last();
					}
					else
					{
						add.subDirectories.Add(new Directory(dir, new List<Directory>()));
						add = add.subDirectories.Last();
					}

				}
				else
				{
					add = add.subDirectories.Find(d => d.name == dir);
				}

			}
			//at this point, we are at the deepest position, add the content.
			add.contents.Add(new ComponentCard(data.properties["name"].ToString()));

		}


		return ret;
	}


}