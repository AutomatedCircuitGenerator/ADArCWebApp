<div class="comp-container">
	<div class="card-wrapper">
		
		<span @onclick="ShowPaletteTooltipFn" style="font-size: 20px; color: black; display: block; text-align: center; padding-bottom: 13px; margin-top: -18px;">
			💡 Component Palette
		</span>
		
		@if (_showPaletteTooltip) {
			<div class="palette-tooltip" style="background: #ece1be">
				<label>Drag components from the Component Palette to the Workbench and they will automatically connect to the Arduino of your choice.</label>
				<label>Right click components for specific information.</label>
				<button @onclick="GotItClickedPalette">Got it!</button>
			</div>
                    		}

		@foreach (Directory d1 in dir.SubDirectories)
		{
			<button class="directory-button level-1" @onclick="@(e => d1.IsHidden = !d1.IsHidden)">
				<svg transform="rotate(@(d1.IsHidden ? -90 : 0))" focusable="false" width="1em" height="1em" fill="black" style="pointer-events: none;" xmlns="http://www.w3.org/2000/svg" class="icon" viewBox="0 0 1024 1024"><path d="M690 405h-46.9c-10.2 0-19.9 4.9-25.9 13.2L512 563.6 406.8 418.2c-6-8.3-15.6-13.2-25.9-13.2H334c-6.5 0-10.3 7.4-6.5 12.7l178 246c3.2 4.4 9.7 4.4 12.9 0l178-246c3.9-5.3.1-12.7-6.4-12.7z"></path><path d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"></path></svg>
				<span>@d1.Name</span>
			</button>
			<div class="indent" hidden="@d1.IsHidden">
				@if (d1.SubDirectories.Count > 0)
				{
					@foreach (Directory d2 in d1.SubDirectories)
					{
						<button class="directory-button level-2" @onclick="@(e => d2.IsHidden = !d2.IsHidden)">
							<svg transform="rotate(@(d2.IsHidden ? -90 : 0))" focusable="false" width="1em" height="1em" fill="black" style="pointer-events: none;" xmlns="http://www.w3.org/2000/svg" class="icon" viewBox="0 0 1024 1024"><path d="M690 405h-46.9c-10.2 0-19.9 4.9-25.9 13.2L512 563.6 406.8 418.2c-6-8.3-15.6-13.2-25.9-13.2H334c-6.5 0-10.3 7.4-6.5 12.7l178 246c3.2 4.4 9.7 4.4 12.9 0l178-246c3.9-5.3.1-12.7-6.4-12.7z"></path><path d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"></path></svg>
							<span>@d2.Name</span>
						</button>
						<div class="indent" hidden="@d2.IsHidden">
							@if (d2.SubDirectories.Count > 0)
							{
								@foreach (Directory d3 in d2.SubDirectories)
								{
									<button class="directory-button level-3" @onclick="@(e => d3.IsHidden = !d3.IsHidden)">
										<svg transform="rotate(@(d3.IsHidden ? -90 : 0))" focusable="false" width="1em" height="1em" fill="black" style="pointer-events: none;" xmlns="http://www.w3.org/2000/svg" class="icon" viewBox="0 0 1024 1024"><path d="M690 405h-46.9c-10.2 0-19.9 4.9-25.9 13.2L512 563.6 406.8 418.2c-6-8.3-15.6-13.2-25.9-13.2H334c-6.5 0-10.3 7.4-6.5 12.7l178 246c3.2 4.4 9.7 4.4 12.9 0l178-246c3.9-5.3.1-12.7-6.4-12.7z"></path><path d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z"></path></svg>
										<span>@d3.Name</span>
									</button>
									<div class="indent" hidden="@d3.IsHidden">
										<div class="col-layout">
											@foreach (ComponentCard card in d3.Contents)
											{
												<ComponentCard Name="@card.Name" GlobalId="@card.GlobalId" handleClick="() => SetHostTargetId(card.GlobalId)" Disabled="@loadLockout"></ComponentCard>
											}
										</div>
									</div>
								}
							}
							else
							{
								<div class="col-layout">
									@foreach (ComponentCard card in d2.Contents)
									{
										<ComponentCard Name="@card.Name" GlobalId="@card.GlobalId" handleClick="() => SetHostTargetId(card.GlobalId)" Disabled="@loadLockout"></ComponentCard>
									}
								</div>
							}
						</div>
					}
				}
				else
				{
					<div class="col-layout">
						@foreach (ComponentCard card in d1.Contents)
						{
							<ComponentCard Name="@card.Name" GlobalId="@card.GlobalId" handleClick="() => SetHostTargetId(card.GlobalId)" Disabled="@loadLockout"></ComponentCard>
						}
					</div>
				}
			</div>
		}
	</div>
</div>

@code {

	private Directory _dir = new Directory("notready", new List<Directory>());

	private bool loadLockout = true;

	/// <summary>
	/// Allow components to be dragged once more.
	/// </summary>
	public void ReleaseLockout()
	{
		loadLockout = false;
		StateHasChanged();
	}

	public ComponentPane()
	{
		Pages.Index.CompPane = this;	
	}

	Directory dir
	{
		get
		{
			if (_dir.Name == "notready")
			{
				_dir = GetDirectory();
			}
			return _dir;
		}
	}

	[Parameter]
	public ADArCWebApp.Pages.Index host { get; set; }


	/// <summary>
	/// Create the directory structure of the component pane based off the directory information in the components.
	/// May not be performant.
	/// </summary>
	/// <returns>A directory structure fit for display in the palette.</returns>
	private Directory GetDirectory()
	{
		Console.WriteLine("refresh Directories");       //make sure this doesn't happen too often.

		Directory mainDir = new("main", new List<Directory>());

		foreach (var (key, data) in ComponentDeclarations.Components)
		{
			var path = data.directoryPath;

			if (path == ""  || !data.enabled)   //throw them out if they don't have a path or if they are disabled
			{
				continue;
			}

			var pathSplit = path.Split("/");   //split the path into folder names

			var add = mainDir;

			for (var i = 0; i < pathSplit.Length; i++)  //navigate through the path, adding new folders as necessary
			{
				var currentDir = pathSplit[i];
				if (add != null && add.SubDirectories.All(d => d.Name != currentDir))
				{
					add.SubDirectories.Add(i == pathSplit.Length - 1 ? new Directory(currentDir, new List<ComponentCard>()) : new Directory(currentDir, new List<Directory>()));

					add = add.SubDirectories.Last();
				}
				else
				{
					add = add?.SubDirectories.Find(d => d.Name == currentDir);
				}

			}
			//at this point, we are at the deepest position, add the content.
			add?.Contents.Add(new ComponentCard(key));
		}

		return mainDir;
	}


	/// <summary>
	/// Sets the image of the dragged component in the Index.razor file.
	/// Invoked on drag start.
	/// </summary>
	/// <param name="id">the global id of the component to show being dragged.</param>
	private void SetHostTargetId(int id)
	{
		host.SetTargetId(id);
	}

	private bool _showPaletteTooltip = false;

	void ShowPaletteTooltipFn()
	{
		_showPaletteTooltip = true;

	}

	public int gotItClicked = 0;
	
	void HidePaletteTooltip()
	{
		_showPaletteTooltip = false;
	}

	void GotItClickedPalette()
	{
		gotItClicked = 1; // Set to 1 when "Got it!" is clicked
		HidePaletteTooltip(); // Hide the tooltip
	}

}