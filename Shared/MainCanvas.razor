<div class="canvas-container" @onmousemove="dragMiddle" @onclick="canvasClick" @onmousedown="dragStart" @onmouseup="dragEnd" @onmousewheel="updZoom" @onmouseenter="handleMouseEnter" @onmouseleave="handleMouseLeave">
	@foreach (var c in comps) {
			<VaryingComponent forceBorder="c.Key==Pages.Index.app.selectedComponent" handleClick="e=>componentSelection(e, c)" objId=@(c.Value.globalId) individualData=@c.Value DragStart="e=>dragComponentStart(e, c)" DragEnd="dragComponentEnd" zoomFactor="@zoomFactor"></VaryingComponent>
	}
</div>

@code {
	public MainCanvas()
	{
		ADArCWebApp.Pages.Index.buildCanvas = this;
	}

	[Parameter]
	public Dictionary<int, ComponentInstance> comps { get; set; }


	[Parameter]
	public EventCallback<MouseEventArgs> handleMouseLeave { get; set; }

	[Parameter]
	public EventCallback<MouseEventArgs> handleMouseEnter { get; set; }


	private bool dragging = false;
	private bool hasTarget = false;
	private KeyValuePair<int, ComponentInstance> target;

	public double zoomFactor = 1;

	private void updZoom(WheelEventArgs e)
	{

		zoomFactor += e.DeltaY / -1000;

		zoomFactor = Math.Clamp(zoomFactor, .4, 3);


		foreach (var comp in comps.Values)
		{
			adjustCompToZoom(comp);
		}

	}

	public ComponentInstance adjustCompToZoom(ComponentInstance comp)
	{
		double baseX = .5 * ADArCWebApp.Pages.Index.defaultScreenWidth * ADArCWebApp.Pages.Index.currentRatio;
		double baseY = .3 * baseX;

		double compX = comp.x;
		double compY = comp.y;

		double vectorX = compX - baseX;
		double vectorY = compY - baseY;

		double iX = zoomFactor * vectorX;
		double iY = zoomFactor * vectorY;

		comp.zoomedX = iX + baseX;
		comp.zoomedY = iY + baseY;

		return comp;
	}

	public ComponentInstance unZoom(ComponentInstance comp)
	{
		double baseX = .5 * ADArCWebApp.Pages.Index.defaultScreenWidth * ADArCWebApp.Pages.Index.currentRatio;
		double baseY = .3 * baseX;

		double zoomedX = comp.x;
		double zoomedY = comp.y;

		double iX = zoomedX - baseX;
		double iY = zoomedY - baseY;

		double vectorX = iX / zoomFactor;
		double vectorY = iY / zoomFactor;

		comp.x = vectorX + baseX;
		comp.y = vectorY + baseY;

		return comp;
	}

	private void dragComponentStart(MouseEventArgs e, KeyValuePair<int, ComponentInstance> target)
	{

		if (e.Button == 0)
		{
			dragging = true;
			hasTarget = true;
			this.target = target;
		}
	}

	private void dragMiddle(MouseEventArgs e)
	{
		if (dragging && hasTarget)
		{
			target.Value.x += (e.MovementX / zoomFactor);
			target.Value.y += (e.MovementY / zoomFactor);
			adjustCompToZoom(target.Value);
		}
		else if (dragging)
		{
			foreach (var t in comps)
			{
				t.Value.x += (e.MovementX / zoomFactor);
				t.Value.y += (e.MovementY / zoomFactor);
				adjustCompToZoom(t.Value);
			}	
		}
	}

	private void dragComponentEnd(MouseEventArgs e)
	{
		dragging = false;
		hasTarget = false;
	}


	private void dragStart(MouseEventArgs e)
	{
		if (e.Button == 0)
		{
			dragging = true;	
		}
	}

	private void dragEnd(MouseEventArgs e)
	{
		dragging = false;
	}

	int selection = -1;
	bool targetFound = false;

	public void componentSelection(MouseEventArgs e, KeyValuePair<int, ComponentInstance> c)
	{
		targetFound = true;
		if (Pages.Index.app.selectedComponent > 0)
		{
			Pages.Index.app.selectedComponent = -1;
		}
		else
		{
			Pages.Index.app.selectedComponent = c.Key;
		}
	}


	private void canvasClick()
	{
		bool disable = false;
		if (targetFound)
		{
			disable = true;
		}
		else
		{
			if (!disable)
			{
				Pages.Index.app.selectedComponent = -2;
			}	
		}
		targetFound = false;
	}
}
