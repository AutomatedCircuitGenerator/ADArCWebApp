@using BlazorMonaco
@using BlazorMonaco.Editor
@using BlazorMonaco.Languages

<span @onclick="showCodeTooltipFn" style="font-size: 20px; color: black; display: block; text-align: center; padding-bottom: 10px; margin-top: 3px">💡 Code Panel</span>

@if (showCodeTooltip) {
			<div class="code-tooltip" style="background: #ece1be">
                <label>Each component added to the Workbench auto-generates code in this Panel, which you can edit freely.</label><br/>
                <label>Click the '▶️ Run' button above to compile it and start the simulation on the Workbench.</label><br/>
                <label>All types of output after running the code will appear in the Console, right below the Code Editor.</label><br/>
                <label>The '⬆️ Export' button above will save to a file both your code below and the components on the Workbench.</label>
                <button @onclick="GotItClickedCode">Got it!</button>
			</div>
		}

<div class="code-container">
    
    <div id="editor-wrapper" style="height:60%; overflow-y:hidden;">
        <!-- Container for the Monaco Editor -->
        <StandaloneCodeEditor  Id="monaco-editor" ConstructionOptions="EditorConstructionOptions" CssClass="editor"></StandaloneCodeEditor>
    </div>

    <!-- Container for the console output -->
    <div id="console-container">
        @foreach (string line in text)
        {
            <span class="@(line.Contains("Error during build:") ? "error" : "auto")">@line</span>
            <hr>
        }
    </div>
</div>

@code {

    /// <summary>
    /// Creates the options for the editor.
    /// </summary>
    /// <param name="editor">the editor to affect.</param>
    /// <returns>the options.</returns>
    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Language = "cpp",
                Value = "void setup() {\n" +
                    "// put your setup code here, to run once:\n\n" +
                    "}\n\n" +
                    "void loop() {\n" +
                    "// put your main code here, to run repeatedly:\n\n" +
                    "}",
                Minimap = new EditorMinimapOptions() { Enabled = false }
            };
    }

    public CodePane()
    {
        Pages.Index.codePane = this;
    }


    List<string> text = ["This is the Console. Compiler and Serial output appears here!", ""];

    int index = 1;

    /// <summary>
    /// Adds text to the console output.
    /// TODO: test extremely thoroughly. Had many issues.
    /// </summary>
    /// <param name="newText">The text to add to the console.</param>
    /// <param name="middleNewLinesMakeHR">if true, using \n in the middle of a line breaks the line. this does not happen if false.</param>
    public void updateConsoleOutput(string newText, bool middleNewLinesMakeHR)
    {
        newText = Regex.Replace(newText, @"Â", ""); //possible utf conversion error fix. rare, good to have
        if (middleNewLinesMakeHR)
        {
            var lines = newText.Split("\n");
            for (int i = 0; i < lines.Count(); i++)
            {
                this.text[index] += lines[i];
                if (lines.Count() > 1 && i != lines.Count()-1)
                {
                    commitBuffer();
                }
            }
        }
        else
        {
            this.text[index] += newText;
            if (newText.EndsWith("\n"))
            {
                commitBuffer();
            }
        }



        StateHasChanged();
    }

    /// <summary>
    /// Creates a new line in the console.
    /// </summary>
    public void commitBuffer()
    {
        this.text.Add("");
        index++;
    }


    public bool showCodeTooltip = false;
    void showCodeTooltipFn() { showCodeTooltip = true;  }
    
    public int gotItClickedCode = 0;
    void HideCodeTooltipCode() { showCodeTooltip = false; }

    void GotItClickedCode() {  
        gotItClickedCode = 1; // Set to 1 when "Got it!" is clicked
        HideCodeTooltipCode(); // Hide the tooltip
    }
}
