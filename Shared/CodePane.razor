@using BlazorMonaco.Editor
@inject IJSRuntime JSRuntime

<div class="code-container">

    <span @onclick="ToggleCodePanelTip" style="cursor:pointer">💡 Code Panel</span>

    @if (isCodePanelTipDisplayed)
    {
        <div class="code-tooltip">
            <label>Each component added to the Workbench auto-generates code in this Panel, which you can edit freely.</label><br/>
            <label>Click the '▶️ Run' button above to compile it and start the simulation on the Workbench.</label><br/>
            <label>All types of output after running the code will appear in the Console, right below the Code Editor.</label><br/>
            <label>The '⬆️ Export' button above will save to a file both your code below and the components on the Workbench.</label>
            <button @onclick="HideCodePanelTip">Got it!</button>
        </div>
    }


    <div id="editor-wrapper">
        <StandaloneCodeEditor Id="monaco-editor" ConstructionOptions="EditorConstructionOptions" CssClass="editor"></StandaloneCodeEditor>
    </div>

    <div id="button-row">
        <button @onclick="ClearConsole" style="margin-right: 0.25rem;">
            <span>@clearIcon</span>
            <span>@clearText</span>
        </button>
        <button @onclick="ToggleScrollLock">
            <span>@lockIcon</span>
            <span>@lockText</span>
        </button>
    </div>
    <div id="console-container">
        @foreach (string line in text)
        {
            <span class="@(line.Contains("Error during build:") ? "error" : "auto")">@line</span>
            <hr>
        }
    </div>
    <p style="text-align: center; margin-bottom: 0">Powered by <a href="https://wokwi.com/">Wokwi</a></p>
</div>

@code {

    private string lockIcon = "🔒";
    private string lockText = "Follow Latest Messages";
    private bool isLocked = false;

    private async void ToggleScrollLock()
    {
        isLocked = !isLocked;
        lockIcon = isLocked ? "🔓" : "🔒";
        lockText = isLocked ? "Scroll Freely" : "Follow Latest Messages";

        await JSRuntime.InvokeVoidAsync("toggleConsoleOutputBehavior");
    }

    private string clearIcon = "🧹";
    private string clearText = "Clear Console";

    List<string> text = ["This is the Console. Compiler and Serial output appears here!", ""];

    int index = 1;

    private void ClearConsole()
    {
        text.Clear();
        text.Add("");
        index = 0;
        StateHasChanged();
    }


    /// <summary>
    /// Creates the options for the editor.
    /// </summary>
    /// <param name="editor">the editor to affect.</param>
    /// <returns>the options.</returns>
    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "cpp",
            Value = "void setup() {\n" +
                    "// put your setup code here, to run once:\n\n" +
                    "}\n\n" +
                    "void loop() {\n" +
                    "// put your main code here, to run repeatedly:\n\n" +
                    "}",
            TabSize = 2,
            InsertSpaces = true,
            DetectIndentation = true,
            TrimAutoWhitespace = true,
            WordBasedSuggestions = true,
            WordBasedSuggestionsOnlySameLanguage = true,
            Minimap = new EditorMinimapOptions() { Enabled = false }
        };
    }

    public CodePane()
    {
        Pages.Index.CodePane = this;
    }

    /// <summary>
    /// Adds text to the console output.
    /// TODO: test extremely thoroughly. Had many issues.
    /// </summary>
    /// <param name="newText">The text to add to the console.</param>
    /// <param name="middleNewLinesMakeHr">if true, using \n in the middle of a line breaks the line. this does not happen if false.</param>
    public void UpdateConsoleOutput(string newText, bool middleNewLinesMakeHr)
    {
        newText = Regex.Replace(newText, @"Â", ""); //possible utf conversion error fix. rare, good to have
        if (middleNewLinesMakeHr)
        {
            var lines = newText.Split("\n");
            for (int i = 0; i < lines.Length; i++)
            {
                text[index] += lines[i];
                if (i != lines.Length - 1)
                {
                    CommitBuffer();
                }
            }
        }
        else
        {
            text[index] += newText;
            if (newText.EndsWith("\n"))
            {
                CommitBuffer();
            }
        }

        StateHasChanged();
    }

    /// <summary>
    /// Creates a new line in the console.
    /// </summary>
    public void CommitBuffer()
    {
        text.Add("");
        index++;
    }


    private bool isCodePanelTipDisplayed = false;

    private void ToggleCodePanelTip()
    {
        isCodePanelTipDisplayed = !isCodePanelTipDisplayed;
    }

    /// <summary>
    /// Hitting "got it" will always result in a hide
    /// </summary>
    private void HideCodePanelTip()
    {
        isCodePanelTipDisplayed = false;
    }

}