@code {
    // KY040
    [Parameter] public double angle { get; set; } = 0;

    [Parameter] public double stepSize { get; set; } = 18;

    [Parameter] public bool pressed { get; set; } = false;

    ElementPin[] pinInfo
    {
        get
        {
            return new ElementPin[]
            {
                new ElementPin(name: "CLK", x:166, y: 7.9, signals: new PinSignalInfo[]{ }, number: 1),
                new ElementPin(name: "DT",  x: 166, y: 17.4, signals: new PinSignalInfo[] { }, number: 2),
                new ElementPin(name: "SW", x: 166, y: 27, signals: new PinSignalInfo[] { }, number: 3),
                new ElementPin(name: "VCC", x: 166, y: 36.3, signals: new PinSignalInfo[] { PinSignalInfo.VCC() }, number: 3),
                new ElementPin(name: "GND", x: 166, y: 45.5, signals: new PinSignalInfo[] { PinSignalInfo.GND() }, number: 4)
            };
        }
    }

    /*
    // If we wanted to use the EventHandler to simulate dispatchEvent
    public event EventHandler RotateCW;
    public event EventHandler RotateCCW;

    //private arrowTimer: ReturnType<typeof setInterval> | null = null;
    private System.Threading.Timer arrowTimer = null;

    private void clockwiseStep()
    {
        this.angle = (this.angle + this.stepSize) % 360;
        RotateCW?.Invoke(this, EventArgs.Empty);
        //this.dispatchEvent(new InputEvent('rotate-cw'));
    }

    private void counterClockwiseStep()
    {
        this.angle = (this.angle - this.stepSize + 360) % 360;
        //RotateCCW?.Invoke(this, EventArgs.Empty); // How I'd assume we'd handle events, looking at the arduino code you worked on, might not be necessary
        //this.dispatchEvent(new InputEvent('rotate-ccw'));
    }

    private void press()
    {
        if (!this.pressed)
        {
            //this.dispatchEvent(new InputEvent('button-press'));
            this.pressed = true;
        }
    }

    private void release()
    {
        if (this.pressed)
        {
            //this.dispatchEvent(new InputEvent('button-release'));
            this.pressed = false;
        }
    }

    private void counterclockwiseArrowPress()
    {
        /*this.arrowTimer = setInterval(() =>
            {
            this.counterClockwiseStep();
        }, 300);
        arrowTimer = new System.Threading.Timer(state => { counterClockwiseStep(); }, null, 0, 300);
    }

    private void clockwiseArrowPress()
    {
        /*this.arrowTimer = setInterval(() =>
        {
            this.clockwiseStep();
        }, 300);
        arrowTimer = new System.Threading.Timer(state => { clockwiseStep(); }, null, 0, 300);
    }

    private void arrowRelease()
    {
        if (this.arrowTimer != null)
        {
            clearInterval(this.arrowTimer);
            this.arrowTimer = null;
        }

    }
    /*
    private void keydown(e: KeyboardEvent)
        {
        switch (e.key)
            {
            case 'ArrowUp':
                case 'ArrowRight':
                this.clockwiseStep();
                e.preventDefault();
            break;

            case 'ArrowDown':
                case 'ArrowLeft':
                this.counterClockwiseStep();
                e.preventDefault();
            break;

                case ' ':
                this.press();
                e.preventDefault();
        break;
    }
    }

    private void keyup(e: KeyboardEvent)
        {
        switch (e.key)
            {
                case ' ':
                e.preventDefault();
                this.release();
        break;
    }
    } */
}

render() {
 return html`
<svg width="30.815mm"
     height="18.63mm"
     version="1.1"
     viewBox="0 0 116 70.4"
     xmlns="http://www.w3.org/2000/svg"
     xmlns:xlink="http://www.w3.org/1999/xlink">
    <defs>
        <linearGradient id="a"
                        x1="158"
                        x2="170"
                        y1="86.5"
                        y2="86.5"
                        gradientTransform="translate(-75.1 -60.1)"
                        gradientUnits="userSpaceOnUse">
            <stop stop-color="#4d4d4d" offset="0" />
            <stop stop-color="#4d4d4d" stop-opacity="0" offset="1" />
        </linearGradient>
    </defs>

    <!-- Board -->
    <path d="m0 0v70.4h99v-70.4zm18 56.5a6.5 6.5 0 0 1 6.5 6.5 6.5 6.5 0 0 1-6.5 6.5 6.5 6.5 0 0 1-6.5-6.5 6.5 6.5 0 0 1 6.5-6.5zm63.8 0.213a6.5 6.5 0 0 1 6.5 6.5 6.5 6.5 0 0 1-6.5 6.5 6.5 6.5 0 0 1-6.5-6.5 6.5 6.5 0 0 1 6.5-6.5z"
          fill="#1a1a1a"
          fill-rule="evenodd" />

    <!-- Rotator -->
    <g fill="#ccc" fill-rule="evenodd">
        <rect x="9.05" y="17.4" width="6.95" height="2.47" rx=".756" />
        <rect x="9.15" y="26.5" width="6.95" height="2.47" rx=".756" />
        <rect x="9.05" y="36.1" width="6.95" height="2.47" rx=".756" />
    </g>

    <g tabindex="0" @keydown=${this.keydown} @keyup=${this.keyup}>
        <rect x="12.2" y="8.05" width="48.4" height="41" rx="7.12" fill="#e6e6e6" />

        <circle cx="36.6" cy="28.5" r="13.5" fill="#666" />
        <rect x="32.5" y="7.87" width="7.42" height="41.5" fill="#666" />

        <!-- Handle -->
        <path transform="rotate(${this.angle}, 36.244, 28.5)"
              d="m36.3 21.4a7.03 7.14 0 0
              0-3.74 1.1v12.1a7.03 7.14 0 0 0 3.74 1.1 7.03 7.14 0 0 0 7.03-7.14 7.03 7.14 0 0
              0-7.03-7.14z"
              fill="#ccc"
              stroke="#060606"
              stroke-width=".3"
              class="handle ${this.pressed ? 'active' : ''}"
              @mousedown=${this.press}
              @mouseup=${this.release}
              @mouseleave=${this.release} />

        <!-- Counter Clockwise Arrow -->
        <g class="arrow-container"
           @click=${this.counterClockwiseStep}
           @mousedown=${this.counterclockwiseArrowPress}
           @mouseup=${this.arrowRelease}
           @mouseleave=${this.arrowRelease}>
            <circle cx="20" cy="43" r="12" fill="red" opacity="0" />
            <path d="m21 44.5c-5.17-1.78-7.55-5.53-6.6-11.2 0.0662-0.327 0.107-0.938 0.272-1.06 0.204-0.137 0.312-0.116 0.39-0.1 0.0775 0.0152 0.139 0.0274 0.189 0.102 0.846 3.81 3.13 6.84 6.57 7.59 0.304-0.787 0.461-3.32 0.826-3.24 0.428 0.0848 4.31 5.73 4.93 6.65-0.978 0.839-6.07 4.44-6.95 4.28 0 0 0.206-2.19 0.362-2.96z"
                  fill="#b3b3b3"
                  stroke="#000"
                  stroke-width=".0625px"
                  class="arrow" />
        </g>

        <!-- Clockwise Arrow -->
        <g class="arrow-container"
           @click=${this.clockwiseStep}
           @mousedown=${this.clockwiseArrowPress}
           @mouseup=${this.arrowRelease}
           @mouseleave=${this.arrowRelease}>
            <circle cx="20" cy="15" r="12" fill="red" opacity="0" />
            <path d="m21.2 12.1c-5.17 1.78-7.55 5.53-6.6 11.2 0.0662 0.327 0.107 0.938 0.272 1.06 0.204 0.137 0.312 0.116 0.39 0.1 0.0775-0.0152 0.139-0.0274 0.189-0.102 0.846-3.81 3.13-6.84 6.57-7.59 0.304 0.787 0.461 3.32 0.826 3.24 0.428-0.0848 4.31-5.73 4.93-6.65-0.978-0.839-6.07-4.44-6.95-4.28 0 0 0.206 2.19 0.362 2.96z"
                  fill="#b3b3b3"
                  stroke="#022"
                  stroke-width=".0625px"
                  class="arrow" />
        </g>
    </g>

    <!-- Focus indicator for the group above-->
    <rect class="focus-indicator"
          x="10.2"
          y="6.05"
          width="52.4"
          height="45"
          rx="7.12"
          stroke="white"
          stroke-width="2"
          fill="none"
          opacity="0" />

    <!-- Chip Pins -->
    <rect x="83"
          y="1.72"
          width="10.9"
          height="49.2"
          fill="url(#a)"
          fill-rule="evenodd"
          opacity=".65"
          stroke="#fff"
          stroke-width="1.16" />
    <g fill="#ccc" fill-rule="evenodd">
        <rect x="86.9" y="6.54" width="28.9" height="2.47" rx=".877" />
        <rect x="86.8" y="15.9" width="28.9" height="2.47" rx=".877" />
        <rect x="87.1" y="25.6" width="28.9" height="2.47" rx=".877" />
        <rect x="87.1" y="34.9" width="28.9" height="2.47" rx=".877" />
        <rect x="87.6" y="44.1" width="28.9" height="2.47" rx=".877" />
    </g>
    <g fill="#ffffff" font-family="sans-serif" letter-spacing="0px" word-spacing="0px">
        <text x="65.55" y="12.13" font-size="7.29px" fill="#ffffff" stroke-width=".182">CLK</text>
        <text x="65.02" y="21.93" font-size="7.44px" fill="#ffffff">DT</text>
        <text x="65.29" y="31.26" font-size="7.54px" fill="#ffffff">SW</text>
        <text x="70.42" y="39.99" font-size="6.82px" fill="#ffffff">+</text>
        <text x="64.31" y="49.74" font-size="7.59px" fill="#ffffff">GND</text>
    </g>
</svg>
    `;
  }



}