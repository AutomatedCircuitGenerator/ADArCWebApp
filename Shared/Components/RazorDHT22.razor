@code {
    // DHT22
    public static ElementPin[] pinInfo
    {
        get
        {
            return new ElementPin[]
            {
                new ElementPin(name: "VCC", x:40, y: 139, signals: new PinSignalInfo[]{ }, number: 1),
                new ElementPin(name: "SDA",  x: 49.8, y: 139, signals: new PinSignalInfo[] { }, number: 2),
                new ElementPin(name: "GND", x: 69.4, y: 139, signals: new PinSignalInfo[] { }, number: 4),
                // new ElementPin(name: "NC", x: 59.6, y: 139, signals: new PinSignalInfo[] { }, number: 3),

            };
        }
    }

    //have the same name as in the actual component
    [Parameter] [ValueSetting("%", 40, 0, 100)]
    public double humidity { get; set; }

    [Parameter] [ValueSetting("°C", 20, -40, 80)]
    public double temperature { get; set; }

    //16 bits humidity: 400 = 40%, 16 bits temp deg C: 200 = 20%, 8 bits checksum = last 8 sum prev
    //output sig: 0b0000 0001 1001 0000 0000 0000 1100 1000 0101 1000
    static byte[] getSignal(ComponentInstance comp)
    {
        byte[] ret = new byte[5];
        int rh = Convert.ToInt32((double)comp.CompParams["humidity"].GetValue() * 10);
        int t = Convert.ToInt32((double)comp.CompParams["temperature"].GetValue() * 10);
        byte orig1 = (byte)((rh & 0b1111111100000000) >>> 8);
        byte orig2 = (byte)(rh & 0b0000000011111111);
        byte orig3 = (byte)((t & 0b1111111100000000) >>> 8);
        byte orig4 = (byte)(t & 0b0000000011111111);

        ret[0] = ReverseWithLookupTable(orig1);
        ret[1] = ReverseWithLookupTable(orig2);
        ret[2] = ReverseWithLookupTable(orig3);
        ret[3] = ReverseWithLookupTable(orig4);
        ret[4] = ReverseWithLookupTable((byte)(orig1 + orig2 + orig3 + orig4));

        return ret;
    }

    private static byte[] BitReverseTable =
    {
    0x00, 0x80, 0x40, 0xc0, 0x20, 0xa0, 0x60, 0xe0,
    0x10, 0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70, 0xf0,
    0x08, 0x88, 0x48, 0xc8, 0x28, 0xa8, 0x68, 0xe8,
    0x18, 0x98, 0x58, 0xd8, 0x38, 0xb8, 0x78, 0xf8,
    0x04, 0x84, 0x44, 0xc4, 0x24, 0xa4, 0x64, 0xe4,
    0x14, 0x94, 0x54, 0xd4, 0x34, 0xb4, 0x74, 0xf4,
    0x0c, 0x8c, 0x4c, 0xcc, 0x2c, 0xac, 0x6c, 0xec,
    0x1c, 0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c, 0xfc,
    0x02, 0x82, 0x42, 0xc2, 0x22, 0xa2, 0x62, 0xe2,
    0x12, 0x92, 0x52, 0xd2, 0x32, 0xb2, 0x72, 0xf2,
    0x0a, 0x8a, 0x4a, 0xca, 0x2a, 0xaa, 0x6a, 0xea,
    0x1a, 0x9a, 0x5a, 0xda, 0x3a, 0xba, 0x7a, 0xfa,
    0x06, 0x86, 0x46, 0xc6, 0x26, 0xa6, 0x66, 0xe6,
    0x16, 0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76, 0xf6,
    0x0e, 0x8e, 0x4e, 0xce, 0x2e, 0xae, 0x6e, 0xee,
    0x1e, 0x9e, 0x5e, 0xde, 0x3e, 0xbe, 0x7e, 0xfe,
    0x01, 0x81, 0x41, 0xc1, 0x21, 0xa1, 0x61, 0xe1,
    0x11, 0x91, 0x51, 0xd1, 0x31, 0xb1, 0x71, 0xf1,
    0x09, 0x89, 0x49, 0xc9, 0x29, 0xa9, 0x69, 0xe9,
    0x19, 0x99, 0x59, 0xd9, 0x39, 0xb9, 0x79, 0xf9,
    0x05, 0x85, 0x45, 0xc5, 0x25, 0xa5, 0x65, 0xe5,
    0x15, 0x95, 0x55, 0xd5, 0x35, 0xb5, 0x75, 0xf5,
    0x0d, 0x8d, 0x4d, 0xcd, 0x2d, 0xad, 0x6d, 0xed,
    0x1d, 0x9d, 0x5d, 0xdd, 0x3d, 0xbd, 0x7d, 0xfd,
    0x03, 0x83, 0x43, 0xc3, 0x23, 0xa3, 0x63, 0xe3,
    0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3,
    0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xab, 0x6b, 0xeb,
    0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb,
    0x07, 0x87, 0x47, 0xc7, 0x27, 0xa7, 0x67, 0xe7,
    0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7,
    0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xaf, 0x6f, 0xef,
    0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff
};
    private static byte ReverseWithLookupTable(byte toReverse)
    {
        return BitReverseTable[toReverse];
    }

    public static async void translate(ComponentInstance comp, long pinChangeCycle)
    {
        bool pin = false;
        if (0 == comp.GetConnection("signal", out InstanceConnection? conn, out List<InstanceConnection>? all))
        {
            pin = await AvrCPU.getPinState(conn!.ToId);
        }
        //pullup
        if (pin && comp.midSignal == 0)
        {
            AvrCPU.setPinState(pinChangeCycle, conn!.ToId, true);//dummy response
        }
        //pulldown
        if (!pin && comp.midSignal == 0)
        {
            comp.midSignal = 1;
            AvrCPU.setPinState(pinChangeCycle, conn!.ToId, false);//dummy response
        }
        if (pin && comp.midSignal == 1)//pullup
        {
            comp.midSignal = 2;
            sendSignal(pinChangeCycle, comp, conn!.ToId);
        }
        // false 1ms+ -> true (20-40us) trigger
        //then send
    }


    static void sendSignal(long originCycles, ComponentInstance comp, int id)
    {
        //false (80us) -> true (80us) ack
        //data -> for each bit -> false (50us), then 26-28us = 0, 70us = 1
        var pkt = new TimingPacket(originCycles);
        var inst = pkt.addInstruction(new(id, false, 1));//1 us delay, shouldn't matter that much
        inst = pkt.addInstruction(new(inst, 80, true)); //80 us after prev, change the line state (to true)


        inst = pkt.addInstruction(new(inst, 80, true));//another 80 us, change line state (to false)

        byte[] sig = getSignal(comp);
        Console.WriteLine("Signal:" + sig[0] + " " + sig[1] + " " + sig[2] + " " + sig[3] + " " + sig[4]);
        for (int i = 0; i < 40; i++)
        {
            bool res = (sig[i / 8] & (1 << (i % 8))) >0;
            inst = pkt.addInstruction(new(inst, 50, true));//entry is false, wait 50 us, then change (to high)

            if (res)
            {
                inst = pkt.addInstruction(new(inst, 70, true));//run true for 70 us, then change (to false)
            }
            else
            {
                inst = pkt.addInstruction(new(inst, 27, true));//see above, but only 27 us for 0
            }
        }

        //state exits loop in false state, no need to change.

        AppInterop.SendInstructionsToArduino(pkt);
        comp.midSignal = 0;
    }

}
<svg width="15.1mm"
     height="30.885mm"
     version="1.1"
     viewBox="0 0 15.1 30.885"
     xmlns="http://www.w3.org/2000/svg">
    <g fill="#ccc" stroke-linecap="round" stroke-width=".21">
        <rect x="3.57" y="23.885" width=".75" height="7" rx=".2" />
        <rect x="6.11" y="23.885" width=".75" height="7" rx=".2" />
        <rect x="8.65" y="23.885" width=".75" height="7" rx=".2" />
        <rect x="11.19" y="23.885" width=".75" height="7" rx=".2" />
    </g>
    <path d="M15.05 23.995V5.033m0 0c0-.107-1.069-4.962-2.662-4.96L2.803.09C1.193.09.05 4.926.05 5.033v18.962c0 .107.086.192.192.192h14.616a.192.192 0 00.192-.192M7.615.948h.004c1.08 0 1.956.847 1.956 1.892s-.876 1.892-1.956 1.892-1.956-.847-1.956-1.892c0-1.044.873-1.89 1.952-1.892zM4.967 8.66H5.9a.21.21 0 01.211.21v.935a.21.21 0 01-.21.21h-.934a.21.21 0 01-.212-.21V8.87a.21.21 0 01.212-.211zm2.168 0h.934a.21.21 0 01.21.21v.935a.21.21 0 01-.21.21h-.934a.21.21 0 01-.21-.21V8.87a.21.21 0 01.21-.211zm2.152 0h.935a.21.21 0 01.21.21v.935a.21.21 0 01-.21.21h-.935a.21.21 0 01-.21-.21V8.87a.21.21 0 01.21-.211zm5.757 0v1.356m0 0h-3.217a.553.553 0 01-.554-.554v-.249a.55.55 0 01.554-.553h3.217M.05 8.66h3.282c.307 0 .554.247.554.553v.25a.552.552 0 01-.554.553H.05m0 1.054h3.282c.307 0 .554.247.554.554v.249a.552.552 0 01-.554.554H.05m4.917-1.357H5.9a.21.21 0 01.211.211v.934a.21.21 0 01-.21.211h-.934a.21.21 0 01-.212-.21v-.935a.21.21 0 01.212-.21zm2.168 0h.934a.21.21 0 01.211.211v.934a.21.21 0 01-.211.211h-.934a.21.21 0 01-.21-.21v-.935a.21.21 0 01.21-.21zm2.153 0h.934a.21.21 0 01.21.211v.934a.21.21 0 01-.21.211h-.934a.21.21 0 01-.211-.21v-.935a.21.21 0 01.21-.21zm2.539 0h3.217v1.356h-3.217a.552.552 0 01-.554-.553v-.25c0-.306.247-.553.554-.553zM.05 13.547h3.282c.307 0 .553.247.553.554v.249a.552.552 0 01-.553.553H.05m4.916-1.356H5.9a.21.21 0 01.211.211v.934a.21.21 0 01-.21.211h-.935a.21.21 0 01-.21-.21v-.935a.21.21 0 01.21-.21zm2.169 0h.933a.21.21 0 01.212.211v.934a.21.21 0 01-.212.211h-.933a.21.21 0 01-.211-.21v-.935a.21.21 0 01.21-.21zm2.152 0h.934a.21.21 0 01.211.211v.934a.21.21 0 01-.21.211h-.935a.21.21 0 01-.21-.21v-.935a.21.21 0 01.21-.21zm5.757 1.356h-3.217a.552.552 0 01-.554-.553v-.25c0-.306.247-.553.554-.553h3.217m0 3.791h-3.218a.553.553 0 01-.553-.554v-.249c0-.306.247-.553.553-.553h3.218m-14.994 0h3.282c.307 0 .553.247.553.553v.25a.552.552 0 01-.553.553H.05m4.916-1.356H5.9a.21.21 0 01.211.211v.934a.21.21 0 01-.21.21h-.935a.21.21 0 01-.21-.21v-.934a.21.21 0 01.21-.21zm2.169 0h.934a.21.21 0 01.21.211v.934a.21.21 0 01-.21.21h-.934a.21.21 0 01-.211-.21v-.934a.21.21 0 01.211-.21zm2.152 0h.934a.21.21 0 01.211.211v.934a.21.21 0 01-.21.21h-.935a.21.21 0 01-.21-.21v-.934a.21.21 0 01.21-.21zM.05 18.362h3.282c.307 0 .553.247.553.554v.25a.552.552 0 01-.553.552H.05m4.916-1.355H5.9a.21.21 0 01.211.21v.934a.21.21 0 01-.21.211h-.935a.21.21 0 01-.21-.21v-.934a.21.21 0 01.21-.211zm2.169 0h.933a.21.21 0 01.212.21v.934a.21.21 0 01-.212.211h-.933a.21.21 0 01-.211-.21v-.934a.21.21 0 01.21-.211zm2.152 0h.934a.21.21 0 01.211.21v.934a.21.21 0 01-.21.211h-.935a.21.21 0 01-.21-.21v-.934a.21.21 0 01.21-.211zm5.757 1.355h-3.218a.552.552 0 01-.553-.553v-.25c0-.306.247-.552.553-.552h3.218M10.49 5.056V7.31a.192.192 0 01-.193.193h-.85a.192.192 0 01-.193-.193V5.056H8.23v2.286a.192.192 0 01-.192.192h-.851a.192.192 0 01-.193-.192V5.056H5.94v2.286a.192.192 0 01-.193.192h-.85a.192.192 0 01-.193-.192V5.056C.033 5.025.05 5.033.05 5.033m15 0l-4.56.023v0"
          fill="#f2f2f2"
          stroke="#000"
          stroke-linecap="round"
          stroke-width=".1" />
    <text x="3.7415893"
          y="22.863354"
          fill="#000000"
          font-family="sans-serif"
          font-size="2.2px"
          stroke-width=".05"
          style="line-height:1.25">
        DHT22
    </text>
</svg>