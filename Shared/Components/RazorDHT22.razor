@code {
    // DHT22
    public static ElementPin[] pinInfo
    {
        get
        {
            return new ElementPin[]
            {
                new ElementPin(name: "VCC", x:15, y: 114.9, signals: new PinSignalInfo[]{ }, number: 1),
                new ElementPin(name: "SDA",  x: 24.5, y: 114.9, signals: new PinSignalInfo[] { }, number: 2),
                new ElementPin(name: "NC", x: 34.1, y: 114.9, signals: new PinSignalInfo[] { }, number: 3),
                new ElementPin(name: "GND", x: 43.8, y: 114.9, signals: new PinSignalInfo[] { }, number: 4)
            };
        }
    }

    [Parameter]
    public double humidity { get; set; }

    [Parameter]
    public double temperature { get; set; }

    //16 bits humidity: 400 = 40%, 16 bits temp deg C: 200 = 20%, 8 bits checksum = last 8 sum prev
    //output sig: 0b0000 0001 1001 0000 0000 0000 1100 1000 0101 1000
    static byte[] getSignal(ComponentInstance comp)
    {
        byte[] ret = new byte[5];
        int rh = Convert.ToInt32((double)comp.compParams["humidity"] * 10);
        int t = Convert.ToInt32((double)comp.compParams["temperature"] * 10);
        int sum = t + rh;

        ret[0] = (byte)(rh & 0b1111111100000000);
        ret[1] = (byte)(rh & 0b0000000011111111);
        ret[2] = (byte)(t & 0b1111111100000000);
        ret[3] = (byte)(t & 0b0000000011111111);
        ret[4] = (byte)(sum & 0b0000000011111111);

        return ret;
    }

    public static async void translate(ComponentInstance comp)
    {
        bool pin = false;
        if (0 == comp.getConnection("signal", out InstanceConnection? conn, out List<InstanceConnection>? all))
        {
            pin = AvrCPU.getPinState(conn!.toId);
        }

        if (!pin && comp.midSignal == 0)
        {
            comp.midSignal = 1;
        }
        if (pin && comp.midSignal == 1)
        {
            comp.midSignal = 2;
            sendSignal(comp, conn!.toId);
        }
        // false 1ms+ -> true (20-40us) trigger
        //then send
    }


    async static void sendSignal(ComponentInstance comp, int id)
    {
        //false (80us) -> true (80us) ack
        //data -> for each bit -> false (50us), then 26-28us = 0, 70us = 1

        AvrCPU.setPinState(id, false);
        Pages.Index.codePane!.updateConsoleOutput("set False", false);
        bool r = await AppInterop.usDelay(10);
        AvrCPU.setPinState(id, true);
        Pages.Index.codePane!.updateConsoleOutput("set true", false);
        r = await AppInterop.usDelay(2000000);
        // byte[] sig = getSignal(comp);
         // for (int i = 0; i < 40; i++)
         // {
         //     bool res = (sig[i / 8] & 1 << (i % 8)) == 1;
         //     AvrCPU.setPinState(id, false);
         //     udelay(35);
         //     AvrCPU.setPinState(id, true);
         //     if (res)
         //    {
         //         udelay(55);
         //     }
         //    else
         //     {
         //         udelay(12);        
         //     }
         // }

        AvrCPU.setPinState(id, false);
        Pages.Index.codePane!.updateConsoleOutput("set False", false);
        comp.midSignal = 0;
    }

    static void udelay(long us)
    {
        var sw = System.Diagnostics.Stopwatch.StartNew();
        long v = (us * System.Diagnostics.Stopwatch.Frequency) / 1000000;
        while (sw.ElapsedTicks < v)
        {
        }
    }

    async static void sendSignalAsync(ComponentInstance comp, int id)
    {
        //false (80us) -> true (80us) ack
        //data -> for each bit -> false (50us), then 26-28us = 0, 70us = 1

        AvrCPU.setPinState(id, false);
        await udelayAsync(80);
        AvrCPU.setPinState(id, true);
        await udelayAsync(80);
        byte[] sig = getSignal(comp);
        for (int i = 0; i < 40; i++)
        {
            bool res = (sig[i / 8] & 1 << (i % 8)) == 1;
            AvrCPU.setPinState(id, false);
            udelay(50);
            AvrCPU.setPinState(id, true);
            if (res)
            {
                udelay(70);
            }
            else
            {
                udelay(27);
            }
        }

        AvrCPU.setPinState(id, false);

        comp.midSignal = 0;
    }
    static Task udelayAsync(long us)
    {
        return Task.Delay(TimeSpan.FromMicroseconds(us));
    }
}
<svg width="15.1mm"
     height="30.885mm"
     version="1.1"
     viewBox="0 0 15.1 30.885"
     xmlns="http://www.w3.org/2000/svg">
    <g fill="#ccc" stroke-linecap="round" stroke-width=".21">
        <rect x="3.57" y="23.885" width=".75" height="7" rx=".2" />
        <rect x="6.11" y="23.885" width=".75" height="7" rx=".2" />
        <rect x="8.65" y="23.885" width=".75" height="7" rx=".2" />
        <rect x="11.19" y="23.885" width=".75" height="7" rx=".2" />
    </g>
    <path d="M15.05 23.995V5.033m0 0c0-.107-1.069-4.962-2.662-4.96L2.803.09C1.193.09.05 4.926.05 5.033v18.962c0 .107.086.192.192.192h14.616a.192.192 0 00.192-.192M7.615.948h.004c1.08 0 1.956.847 1.956 1.892s-.876 1.892-1.956 1.892-1.956-.847-1.956-1.892c0-1.044.873-1.89 1.952-1.892zM4.967 8.66H5.9a.21.21 0 01.211.21v.935a.21.21 0 01-.21.21h-.934a.21.21 0 01-.212-.21V8.87a.21.21 0 01.212-.211zm2.168 0h.934a.21.21 0 01.21.21v.935a.21.21 0 01-.21.21h-.934a.21.21 0 01-.21-.21V8.87a.21.21 0 01.21-.211zm2.152 0h.935a.21.21 0 01.21.21v.935a.21.21 0 01-.21.21h-.935a.21.21 0 01-.21-.21V8.87a.21.21 0 01.21-.211zm5.757 0v1.356m0 0h-3.217a.553.553 0 01-.554-.554v-.249a.55.55 0 01.554-.553h3.217M.05 8.66h3.282c.307 0 .554.247.554.553v.25a.552.552 0 01-.554.553H.05m0 1.054h3.282c.307 0 .554.247.554.554v.249a.552.552 0 01-.554.554H.05m4.917-1.357H5.9a.21.21 0 01.211.211v.934a.21.21 0 01-.21.211h-.934a.21.21 0 01-.212-.21v-.935a.21.21 0 01.212-.21zm2.168 0h.934a.21.21 0 01.211.211v.934a.21.21 0 01-.211.211h-.934a.21.21 0 01-.21-.21v-.935a.21.21 0 01.21-.21zm2.153 0h.934a.21.21 0 01.21.211v.934a.21.21 0 01-.21.211h-.934a.21.21 0 01-.211-.21v-.935a.21.21 0 01.21-.21zm2.539 0h3.217v1.356h-3.217a.552.552 0 01-.554-.553v-.25c0-.306.247-.553.554-.553zM.05 13.547h3.282c.307 0 .553.247.553.554v.249a.552.552 0 01-.553.553H.05m4.916-1.356H5.9a.21.21 0 01.211.211v.934a.21.21 0 01-.21.211h-.935a.21.21 0 01-.21-.21v-.935a.21.21 0 01.21-.21zm2.169 0h.933a.21.21 0 01.212.211v.934a.21.21 0 01-.212.211h-.933a.21.21 0 01-.211-.21v-.935a.21.21 0 01.21-.21zm2.152 0h.934a.21.21 0 01.211.211v.934a.21.21 0 01-.21.211h-.935a.21.21 0 01-.21-.21v-.935a.21.21 0 01.21-.21zm5.757 1.356h-3.217a.552.552 0 01-.554-.553v-.25c0-.306.247-.553.554-.553h3.217m0 3.791h-3.218a.553.553 0 01-.553-.554v-.249c0-.306.247-.553.553-.553h3.218m-14.994 0h3.282c.307 0 .553.247.553.553v.25a.552.552 0 01-.553.553H.05m4.916-1.356H5.9a.21.21 0 01.211.211v.934a.21.21 0 01-.21.21h-.935a.21.21 0 01-.21-.21v-.934a.21.21 0 01.21-.21zm2.169 0h.934a.21.21 0 01.21.211v.934a.21.21 0 01-.21.21h-.934a.21.21 0 01-.211-.21v-.934a.21.21 0 01.211-.21zm2.152 0h.934a.21.21 0 01.211.211v.934a.21.21 0 01-.21.21h-.935a.21.21 0 01-.21-.21v-.934a.21.21 0 01.21-.21zM.05 18.362h3.282c.307 0 .553.247.553.554v.25a.552.552 0 01-.553.552H.05m4.916-1.355H5.9a.21.21 0 01.211.21v.934a.21.21 0 01-.21.211h-.935a.21.21 0 01-.21-.21v-.934a.21.21 0 01.21-.211zm2.169 0h.933a.21.21 0 01.212.21v.934a.21.21 0 01-.212.211h-.933a.21.21 0 01-.211-.21v-.934a.21.21 0 01.21-.211zm2.152 0h.934a.21.21 0 01.211.21v.934a.21.21 0 01-.21.211h-.935a.21.21 0 01-.21-.21v-.934a.21.21 0 01.21-.211zm5.757 1.355h-3.218a.552.552 0 01-.553-.553v-.25c0-.306.247-.552.553-.552h3.218M10.49 5.056V7.31a.192.192 0 01-.193.193h-.85a.192.192 0 01-.193-.193V5.056H8.23v2.286a.192.192 0 01-.192.192h-.851a.192.192 0 01-.193-.192V5.056H5.94v2.286a.192.192 0 01-.193.192h-.85a.192.192 0 01-.193-.192V5.056C.033 5.025.05 5.033.05 5.033m15 0l-4.56.023v0"
          fill="#f2f2f2"
          stroke="#000"
          stroke-linecap="round"
          stroke-width=".1" />
    <text x="3.7415893"
          y="22.863354"
          fill="#000000"
          font-family="sans-serif"
          font-size="2.2px"
          stroke-width=".05"
          style="line-height:1.25">
        DHT22
    </text>
</svg>