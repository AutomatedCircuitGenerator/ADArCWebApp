@code {

    /** The color of a lit segment */
    [Parameter]
    public string color { get; set; } = "red";

    /** The color of an unlit segment */
    [Parameter]
    public string offColor { get; set; } = "#444";

    /** The background color of the 7-segment display */
    [Parameter]
    public string background { get; set; } = "black";

    /** Number of digits to display (1, 2 or 4 are common values) */
    [Parameter]
    public int digits { get; set; } = 1;

    /** Whether to show a colon (clock mode) */
    [Parameter]
    public bool colon { get; set; } = false;

    /** Whether the colon is lit or not */
    [Parameter]
    public bool colonValue { get; set; } = false;

    /**
    * Pin format. `top` to draw pins on top of the segment display panel,
    * `extend` to extend them to the sides of the panel, and `none` to
    * disable drawing the pins.
    */
    [Parameter]
    public string pins { get; set; } = "top";

    /**
    * The values for the individual segments. Each digit has 8
    * segment values in the following order: A, B, C, D, E, F, G, DP
    *
    * The values are 1 for a lit segment, and 0 for an unlit segment.
    */
    [Parameter]
    public int[] values { get; set; } = { 0, 0, 0, 0, 0, 0, 0, 0 };

    public static ElementPin[] pinInfo
    {
        get
        {
            return new ElementPin[]
            {
                new ElementPin(name: "COM1", number: 1, x: 49.5, y: 30, signals: new PinSignalInfo[] { }, description: "Common"),
                new ElementPin(name: "A", number: 2, x: 69, y: 30, signals: new PinSignalInfo[] { }, description: "Segment A"),
                new ElementPin(name: "B", number: 3, x: 59, y: 30, signals: new PinSignalInfo[] { }, description: "Segment B"),
                new ElementPin(name: "C", number: 4, x: 59, y: 100, signals: new PinSignalInfo[] { }, description: "Segment C"),
                new ElementPin(name: "D", number: 5, x: 39, y: 100, signals: new PinSignalInfo[] { }, description: "Segment D"),
                new ElementPin(name: "E", number: 6, x: 28, y: 100, signals: new PinSignalInfo[] { }, description: "Segment E"),
                new ElementPin(name: "F", number: 7, x: 39, y: 30, signals: new PinSignalInfo[] { }, description: "Segment F"),
                new ElementPin(name: "G", number: 8, x: 28, y: 30, signals: new PinSignalInfo[] { }, description: "Segment G"),
                new ElementPin(name: "DP", number: 9, x: 69, y: 100, signals: new PinSignalInfo[] { }, description: "Decimal Point"),
            };
        }
    }

    int yOffset
    {
        get { return this.pins == "extend" ? 2 : 0; }
    }

    (double startX, int bottomY, int cols) pinPositions
    {
        get
        {
            int numPins = digits == 4 ? 14 : digits == 3 ? 12 : 10;
            int cols = (int)Math.Ceiling((double)numPins / 2);
            return (startX: (12.55 * digits - cols * 2.54) / 2, bottomY: pins == "extend" ? 21 : 18, cols);
        }
    }


    double width
    {
        get { return 12.55 * digits; }
    }

    int height
    {
        get { return pins == "extend" ? 23 : 22; }
    }

    double colonPosition
    {
        get { return 1.5 + 12.7 * Math.Round((double)digits / 2); }
    }

    Func<int, double> x = i => 3.5 + i * 12.7;


    private string fill(int index, int startIndex)
    {
        return values[startIndex + index] != 0 ? this.color : this.offColor;
    }

    public static async void translate(ComponentInstance comp, long pinChangeCycle)
    {
        int a = -1, b = -1, c = -1, d = -1, e = -1, f = -1, g = -1, dp = -1;
        if (0 == comp.GetConnection("a", out InstanceConnection? conn, out List<InstanceConnection>? all))
        {
            a = conn!.ToId;
        }

        if (0 == comp.GetConnection("b", out InstanceConnection? conn2, out List<InstanceConnection>? all2))
        {
            b = conn2!.ToId;
        }

        if (0 == comp.GetConnection("c", out InstanceConnection? conn3, out List<InstanceConnection>? all3))
        {
            c = conn3!.ToId;
        }

        if (0 == comp.GetConnection("d", out InstanceConnection? conn4, out List<InstanceConnection>? all4))
        {
            d = conn4!.ToId;
        }

        if (0 == comp.GetConnection("e", out InstanceConnection? conn5, out List<InstanceConnection>? all5))
        {
            e = conn5!.ToId;
        }

        if (0 == comp.GetConnection("f", out InstanceConnection? conn6, out List<InstanceConnection>? all6))
        {
            f = conn6!.ToId;
        }

        if (0 == comp.GetConnection("g", out InstanceConnection? conn7, out List<InstanceConnection>? all7))
        {
            g = conn7!.ToId;
        }

        if (0 == comp.GetConnection("dp", out InstanceConnection? conn8, out List<InstanceConnection>? all8))
        {
            dp = conn8!.ToId;
        }

        int[] value = { 0, 0, 0, 0, 0, 0, 0, 0 };
        value[0] = await AvrCPU.getPinState(a) ? 1 : 0;
        value[1] = await AvrCPU.getPinState(b) ? 1 : 0;
        value[2] = await AvrCPU.getPinState(c) ? 1 : 0;
        value[3] = await AvrCPU.getPinState(d) ? 1 : 0;
        value[4] = await AvrCPU.getPinState(e) ? 1 : 0;
        value[5] = await AvrCPU.getPinState(f) ? 1 : 0;
        value[6] = await AvrCPU.getPinState(g) ? 1 : 0;
        value[7] = await AvrCPU.getPinState(dp) ? 1 : 0;

        comp.CompParams["values"].setValue(value);
    }

}

<svg width="@(width)mm"
     height="@(height)mm"
     version="1.1"
     viewBox="0 0 @(width) @(height)"
     xmlns="http://www.w3.org/2000/svg">
    <defs>
        <pattern id="pin-pattern" height="2" width="2.54" patternUnits="userSpaceOnUse">
            @if (pins == "extend")
            {
                <rect x="1.02" y="0" height="2" width="0.5" fill="#aaa"/>
            }
            else
            {
                <circle cx="1.27" cy="1" r=0.5 fill="#aaa"/>
            }
        </pattern>
    </defs>
    <rect x="0" y="@(yOffset)" width="@(width)" height="20.5"/>


    @for (int i = 0; i < digits; i++)
    {
        <g transform="skewX(-8) translate(@(x(i)), @(yOffset + 2.4)) scale(0.81)">
            <polygon points="2 0 8 0 9 1 8 2 2 2 1 1" fill="@(fill(0, i * 8))"/>
            <polygon points="10 2 10 8 9 9 8 8 8 2 9 1" fill="@(fill(1, i * 8))"/>
            <polygon points="10 10 10 16 9 17 8 16 8 10 9 9" fill="@(fill(2, i * 8))"/>
            <polygon points="8 18 2 18 1 17 2 16 8 16 9 17" fill="@(fill(3, i * 8))"/>
            <polygon points="0 16 0 10 1 9 2 10 2 16 1 17" fill="@(fill(4, i * 8))"/>
            <polygon points="0 8 0 2 1 1 2 2 2 8 1 9" fill=@(fill(5, i * 8))/>
            <polygon points="2 8 8 8 9 9 8 10 2 10 1 9" fill=@(fill(6, i * 8))/>
        </g>
        <circle cx="@(x(i) + 7.4)" cy="@(yOffset + 16)" r="0.89" fill="@(fill(7, i * 8))"/>
    }


    @if (colon)
    {
        <g transform="skewX(-8)" fill="@(colonValue ? color : offColor)">
            <circle cx="@(colonPosition)" cy="@(yOffset + 5.75)" r="0.89"/>
            <circle cx="@(colonPosition)" cy="@(yOffset + 13.25)" r="0.89"/>
        </g>
    }

    @if (pins != "none")
    {
        <g fill="url(#pin-pattern)" transform="translate(@pinPositions.startX, 0)">
            <rect height="2" width=@(pinPositions.cols * 2.54)/>
            <rect height="2" width=@(pinPositions.cols * 2.54) transform="translate(0, @pinPositions.bottomY)"/>
        </g>
    }
</svg>