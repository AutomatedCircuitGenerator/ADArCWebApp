<div class="comp-wrapper @(borderClasses())" @onclick="handleClick" @onmouseenter="()=>enableBorder=true" @onmouseleave="()=>enableBorder=false" @onmousedown="DragStart" @onmouseup="DragEnd" @onmousemove="DragProgress" style="top:@(individualData.zoomedY)px; left:@(individualData.zoomedX)px; position:@(posAbolute ? "absolute":"relative"); transform: scale(@(zoomFactor))">
	@if(forceBorder && !Pages.Index.app!.isRunning)
	{
		<button id="deletebutton" @onclick="remove">
				<img src="images/redx.png">
		</button>
	}

	<DynamicComponent Type="individualData.data.compType" Parameters="individualData.data.compParams"></DynamicComponent>
</div>


@code {
	// for lcd: blink=@((bool)individualData.moreData["blink"]) background="@((string)individualData.moreData["bg"])" backlight=@((bool)individualData.moreData["back"]) cursor=@((bool)individualData.moreData["cursor"]) cursorX="@((int)individualData.moreData["cX"])" cursorY="@((int)individualData.moreData["cY"])" color="@((string)individualData.moreData["color"])"
	[Parameter]
	public int objId { get; set; }

	[Parameter]
	public bool posAbolute { get; set; } = true;

	[Parameter]
	public EventCallback<MouseEventArgs> DragStart { get; set; }

	[Parameter]
	public EventCallback<MouseEventArgs> DragProgress { get; set; }

	[Parameter]
	public EventCallback<MouseEventArgs> DragEnd { get; set; }


	[Parameter]
	public EventCallback<MouseEventArgs> handleClick { get; set; }

	[Parameter]
	public ComponentInstance individualData { get; set; }


	[Parameter]
	public double zoomFactor { get; set; } = 1;

	private bool enableBorder = false;

	[Parameter]
	public bool disableBorder { get; set; } = false;

	[Parameter]
	public bool forceBorder { get; set; } = false;



	private string borderClasses()
	{
		if (!disableBorder)
		{
			if (forceBorder)
			{
				return "a-border";
			}
			else if (enableBorder)
			{
				return "b-border";
			}
			else
			{
				return "";
			}
		}
		else
		{
			return "";
		}
	}
	public void remove()
	{
		Pages.Index.app!.removecomp();
	}
}
