@using System.Reflection
@using System.Text.RegularExpressions
@inject IJSRuntime JsRuntime

<div class="comp-wrapper @(borderClasses())" @oncontextmenu="HandleContextMenu" @oncontextmenu:preventDefault="true" @onclick="handleClick" @onmouseenter="()=>enableBorder=true" @onmouseleave="()=>enableBorder=false" @onmousedown="DragStart" @onmouseup="DragEnd" @onmousemove="DragProgress" style="top:@(individualData.zoomedY)px; left:@(individualData.zoomedX)px; position:@(posAbolute ? "absolute":"relative"); transform: scale(@(zoomFactor))">
    @if(forceBorder && !Pages.Index.app!.isRunning)
    {
        <button id="deletebutton" @onclick="remove">
            <img src="images/redx.png">
        </button>
    }

    <DynamicComponent Type="individualData.data.compType" Parameters="individualData.getPropsAsParams()"></DynamicComponent>
</div>

<!-- ignore scaling -->
<div class="EnvironmentalSettingsClass" style="display: @(showMenu ? "block" : "none");">
    <div class="settingsContainer">
        <button class="close-button" @onclick="HandleClickOutside">&#10006;</button>
        <h2>Environmental Settings</h2>

    <!-- Value Setting -->
        @foreach(var prop in individualData.data.compType.GetProperties())
        {
            foreach (var value in prop.GetCustomAttributes<ValueSetting>())
            {
                <div class="valueSetting" style="padding: 3px 0;">
                    <h2>@(formatTitle(prop))</h2>
                    <div style="margin-left: 10px;">
                        <input type="number" value="@value.DefaultValue" class="default-value-input" @onchange="(e) => { onInput(e, prop, true); }" min="@value.MinValue" max="@value.MaxValue"></input>
                        <span class="default-value-label">@value.Label</span>
                    </div>
                    <p class="min-max-values" style="margin: 0; white-space: nowrap;">Min: @value.MinValue&nbsp;&nbsp;&nbsp;&nbsp;Max: @value.MaxValue</p>
                </div>
            }
        }
        
        <!-- Dropdown Setting -->
        @foreach(var prop in individualData.data.compType.GetProperties())
        {
            foreach (var value in prop.GetCustomAttributes<DropdownSetting>())
            {
                <div class="dropdownSetting" style="padding: 10px 0;">
                    <h2>@(formatTitle(prop))</h2>
                    <select @onchange="(e) => { onInput(e, prop, false); }">
                        @foreach (var s in value.dropdownList)
                        {
                            <option value="@s">@s</option>
                        }
                    </select>
                </div>
            }
        }
            
    </div>
</div>

@code {

    private string formatTitle(PropertyInfo prop)
    {
        var addSpace = Regex.Replace(prop.Name, "[A-Z]", (m) => " " + m.Captures[0].Value);
        var firstCapital = Regex.Replace(addSpace, "^[a-z]", (m) => m.Captures[0].Value.ToUpper());

        return firstCapital;
    }

    // for lcd: blink=@((bool)individualData.moreData["blink"]) background="@((string)individualData.moreData["bg"])" backlight=@((bool)individualData.moreData["back"]) cursor=@((bool)individualData.moreData["cursor"]) cursorX="@((int)individualData.moreData["cX"])" cursorY="@((int)individualData.moreData["cY"])" color="@((string)individualData.moreData["color"])"
    [Parameter]
    public int objId { get; set; }

    [Parameter]
    public bool posAbolute { get; set; } = true;

    [Parameter]
    public EventCallback<MouseEventArgs> DragStart { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> DragProgress { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> DragEnd { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> handleClick { get; set; }

    [Parameter]
    public ComponentInstance individualData { get; set; }

    [Parameter]
    public double zoomFactor { get; set; } = 1;

    private bool enableBorder = false;

    [Parameter]
    public bool disableBorder { get; set; } = false;

    [Parameter]
    public bool forceBorder { get; set; } = false;

    private string borderClasses()
    {
        if (!disableBorder)
        {
            if (forceBorder)
            {
                return "a-border";
            }
            else if (enableBorder)
            {
                return "b-border";
            }
            else
            {
                return "";  
            }
        }
        else
        {
            return "";  
        }
    }
    public void onInput(ChangeEventArgs e, PropertyInfo prop, bool convert)
    {


        if (convert)//theoretically number data has convert true, -> double, whereas strings have convert false.
        {
            individualData.compParams[prop.Name.ToLower()].setValue<double>(Convert.ToDouble(e.Value));
        }
        else
        {
            individualData.compParams[prop.Name.ToLower()].setValue((string)e.Value);
        }

        if (individualData.compParams.ContainsKey("translateOnInput")) 
        {
            individualData.data.compType.GetMethod("translate").Invoke(individualData, [individualData]);
        }
    }

    public void remove()
    {
        Pages.Index.app!.removecomp();
    }

    private bool showMenu = false;

    [JSInvokable]
    public void HandleClickOutside()
    {
        showMenu = false;
        StateHasChanged();
    }


    private double menuTop = 0;
    private double menuLeft = 0;

    public void HandleContextMenu(MouseEventArgs args)
    {
        // Set the menu to be visible
        showMenu = true;
        Console.WriteLine("lel");

        // Set menu position
        menuTop = args.ClientY;
        menuLeft = args.ClientX;
    }
    
}
