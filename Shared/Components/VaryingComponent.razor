@using System.Reflection
@inject IJSRuntime JsRuntime

<div class="comp-wrapper @(BorderClasses())" @oncontextmenu:preventDefault="true" @onclick="handleClick" @oncontextmenu="RightClick" @onmouseenter="() => enableBorder = true" @onmouseleave="() => enableBorder = false" @onmousedown="DragStart" @onmouseup="DragEnd" @onmousemove="DragProgress" style="top:@(individualData.zoomedY)px; left:@(individualData.zoomedX)px; position:@(posAbsolute ? "absolute" : "relative"); transform: scale(@(zoomFactor));">
    <div id="component-@individualData.localId">
        <DynamicComponent @ref="_componentRef" Type="individualData.Data.compType" Parameters="individualData.GetPropsAsParams()"></DynamicComponent>
    </div>
</div>
@if (!forceBorder)
{
    rightClickable = false;
}
@if (forceBorder)
{
    @if (rightClickable)
    {
        <div class="right-click-container" style="top: @(individualData.zoomedY)px; left: @(individualData.zoomedX)px">
            @if (individualData.Data.templateParams.Count > 0 || individualData.Data.EnvironmentalSettingsType != null)
            {
                <button id="environmental-settings-button" @onclick="HandleEnvironmentalSettingsMenu">
                    <span>⚙</span>
                    <span style="padding-left: 5px">￨ Environmental Settings</span>
                </button>
            }
            <button id="component-help-button" @onclick="@(() => OpenLink(GenerateLink(individualData.Data.name)))">
                <span style="padding-left: 3px">𝗶</span>
                <span style="padding-left: 7px">￨ Component Information</span>
            </button>
            @if (!Pages.Index.App!.IsRunning && !individualData.IsArduino())
            {
                <button id="deletebutton" @onclick="Remove">
                    <span>x</span>
                    <span style="padding-left: 6px">￨ Delete Component</span>
                </button>
            }
        </div>
    }
}
<!-- ignore scaling -->
<div class="EnvironmentalSettingsClass" style="display: @(showMenu ? "block" : "none"); top: @(_envSettingsY + Transform?.translate.y)px; left: @(_envSettingsX + Transform?.translate.x)px;">
    <div @onclick:stopPropagation @onmousedown:stopPropagation>
        <div class="settingsContainer" @onmousedown="StartEnvSettingsDrag">
            <div style="display: flex; margin-bottom: 0.5rem">
                <h2 style="margin-bottom:0; white-space: nowrap">Environmental Settings</h2>
                <button class="close-button" @onclick="CloseEnvironmentalSettings">❌</button>
            </div>

            @if (individualData.Data.EnvironmentalSettingsType != null)
            {
                var parameters = new Dictionary<string, object>();

                parameters["Controller"] = individualData?.Controller;

                <DynamicComponent Type="individualData?.Data.EnvironmentalSettingsType" Parameters="parameters"/>
            }

            <!-- Value Setting -->
            @foreach (var prop in individualData.Data.compType.GetProperties().Where(property => property.GetCustomAttribute<SettingGroup>() == null))
            {
                foreach (var value in prop.GetCustomAttributes<ValueSetting>())
                {
                    <div class="valueSetting" style="padding: 3px 0;">
                        <h2>@(FormatTitle(prop))</h2>
                        <div style="margin-left: 10px;">
                            <input type="number" value="@value.DefaultValue" class="default-value-input" @onchange="(e) => { OnInput(e, prop, true); }" min="@value.MinValue" max="@value.MaxValue"></input>
                            <span class="default-value-label">@value.Label</span>
                        </div>
                        <p class="min-max-values" style="margin: 0; white-space: nowrap;">Min: @value.MinValue&nbsp;&nbsp;&nbsp;&nbsp;Max: @value.MaxValue</p>
                    </div>
                }
            }

            <!-- Value Setting Double -->
            @foreach (var prop in individualData.Data.compType.GetProperties().Where(property => property.GetCustomAttribute<SettingGroup>() == null))
            {
                foreach (var value in prop.GetCustomAttributes<ValueSettingDouble>())
                {
                    <div class="valueSetting" style="padding: 3px 0;">
                        <h2>@(FormatTitle(prop))</h2>
                        <div style="margin-left: 10px;">
                            <input type="number" value="@value.DefaultValue" class="default-value-input" @onchange="(e) => { OnInput(e, prop, true); }" min="@value.MinValue" max="@value.MaxValue"></input>
                            <span class="default-value-label">@value.Label</span>
                        </div>
                        <p class="min-max-values" style="margin: 0; white-space: nowrap;">Min: @value.MinValue&nbsp;&nbsp;&nbsp;&nbsp;Max: @value.MaxValue</p>
                    </div>
                }
            }
            <!-- Dropdown Setting -->
            @foreach (var prop in individualData.Data.compType.GetProperties().Where(property => property.GetCustomAttribute<SettingGroup>() == null))
            {
                foreach (var value in prop.GetCustomAttributes<DropdownSetting>())
                {
                    <div class="dropdownSetting" style="padding: 10px 0;">
                        <h2>@(FormatTitle(prop))</h2>
                        <select @onchange="(e) => { OnInput(e, prop, false); }">
                            @foreach (var s in value.dropdownList)
                            {
                                <option value="@s">@s</option>
                            }
                        </select>
                    </div>
                }
            }

            <!-- Grouped Settings -->
            @foreach (var group in individualData.Data.compType.GetProperties()
                          .GroupBy(prop => prop.GetCustomAttribute<SettingGroup>()?.Label))
            {
                if (group.Key != null)
                {
                    <div class="settingGroup">
                        <h2 style="text-align: center; font-size: 18px;">@group.Key</h2>
                        <div>
                            @foreach (var prop in group)
                            {
                                var valueSetting = prop.GetCustomAttribute<ValueSetting>();
                                if (valueSetting != null)
                                {
                                    <div class="valueSetting" style="flex: 1;">
                                        <label style="display: block">@valueSetting.Label</label>
                                        <input type="number" value="@valueSetting.DefaultValue" class="default-value-input"
                                               min="@valueSetting.MinValue" max="@valueSetting.MaxValue"
                                               @onchange="(e) => { OnInput(e, prop, true); }">
                                    </div>
                                }
                            }
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {

    private DynamicComponent? _componentRef;

    /// <summary>
    /// Formats a property name for display in the environmental settings.
    /// </summary>
    /// <param name="prop">The property to format.</param>
    /// <returns>A properly formatted title fit for display.</returns>
    private string FormatTitle(PropertyInfo prop)
    {
        var addSpace = Regex.Replace(prop.Name, "[A-Z]", (m) => " " + m.Captures[0].Value);
        var firstCapital = Regex.Replace(addSpace, "^[a-z]", (m) => m.Captures[0].Value.ToUpper());

        return firstCapital;
    }

    [Parameter] public int objId { get; set; }

    [Parameter] public bool posAbsolute { get; set; } = true;

    [Parameter] public EventCallback<MouseEventArgs> DragStart { get; set; }

    [Parameter] public EventCallback<MouseEventArgs> DragProgress { get; set; }

    [Parameter] public EventCallback<MouseEventArgs> DragEnd { get; set; }

    [Parameter] public EventCallback<MouseEventArgs> handleClick { get; set; }

    [Parameter] public ComponentInstance? individualData { get; set; }

    [Parameter] public double zoomFactor { get; set; } = 1;

    [Parameter] public EventCallback CancelDrag { get; set; }

    private bool enableBorder = false;

    [Parameter] public bool disableBorder { get; set; } = false;

    [Parameter] public bool forceBorder { get; set; } = false;
    
    [Parameter] public Transform? Transform { get; set; }

    /// <summary>
    /// Handles the dashed and solid borders.
    /// </summary>
    /// <returns>A css class for which border to display.</returns>
    private string BorderClasses()
    {
        if (individualData.Highlight == Variant.Error)
        {
            return "error-border";
        }

        if (disableBorder) return "";
        if (forceBorder)
        {
            return "a-border";
        }

        return enableBorder ? "b-border" : "";
    }

    /// <summary>
    /// Updates the component's data when the environmental settings are used.
    /// </summary>
    /// <param name="e">The change provided by the language.</param>
    /// <param name="prop">the property to affect.</param>
    /// <param name="convert">true if the property is a number, else false.</param>
    private void OnInput(ChangeEventArgs e, PropertyInfo prop, bool convert)
    {
        if (convert) //theoretically number data has convert true, -> double, whereas strings have convert false.
        {
            if (double.TryParse(e.Value.ToString(), out double result))
            {
                individualData?.CompParams[prop.Name.ToLower()].SetValue(result);
            }
        }
        else
        {
            individualData?.CompParams[prop.Name.ToLower()].SetValue((string)e.Value);
        }

        if (individualData != null && individualData.CompParams.ContainsKey("translateOnInput")) //certain components send data on their own without request. handle these cases.
        {
            individualData.Data.compType.GetMethod("translate")?.Invoke(individualData, [individualData]);
        }
    }

    /// <summary>
    /// Removes a component. Provided for convenience when using the delete button in the menus.
    /// </summary>
    private static void Remove()
    {
        Pages.Index.App!.RemoveComp(false, true);
    }

    private bool showMenu = false;

    [JSInvokable]
    public void CloseEnvironmentalSettings()
    {
        showMenu = false;
    }

    private void HandleEnvironmentalSettingsMenu(MouseEventArgs args)
    {
        // Set the envr settings menu to be visible
        showMenu = true;
        // Console.WriteLine("lel");

        // Set menu position
        if (individualData == null) return;
        if (Transform != null)
        {
            _envSettingsX = args.ClientX - Transform.translate.x;
            _envSettingsY = args.ClientY - 55 - Transform.translate.y;
        }
    }

    private bool rightClickable = false;
    private bool rightClick2 = false;

    [Parameter] public Action CanvasClick { get; set; }

    private void RightClick()
    {
        handleClick.InvokeAsync();
        CanvasClick.Invoke();
        
        rightClickable = true;
        if (rightClickable && forceBorder)
        {
            rightClick2 = true;
        }
        else
        {
            rightClick2 = false;
        }
    }

    public void EndEnvSettingsDrag()
    {
        _isDraggingEnvSettings = false;
    }

    private bool _isDraggingEnvSettings = false;
    private double _envSettingsX;
    private double _envSettingsY;

    private void StartEnvSettingsDrag(MouseEventArgs e)
    {
        _isDraggingEnvSettings = true;
    }

    public void HandleCanvasMouseMove(MouseEventArgs e)
    {
        if (!_isDraggingEnvSettings) return;
        _envSettingsX += e.MovementX;
        _envSettingsY += e.MovementY;
    }

    string GenerateLink(string nodeName)
    {
        Console.WriteLine($"nodeName: {nodeName}");
        switch (nodeName) //no breaks needed as return ends.
        {
            case "Rev 3":
                return "https://adarc-help.mech.website/default.htm?startat=/arduino_concept.html&hash=styler-id1.1.1.2.7.7.1";
            case "MEGA 2560":
                return "https://adarc-help.mech.website/default.htm?startat=/arduino_concept.html&hash=styler-id1.1.1.2.7.7.1";
            case "Uno WIFI Rev2":
                return "https://adarc-help.mech.website/unoWifi_pinout.html#d38361e767";
            case "Pushbutton":
                return ""; // Add link for Pushbutton here
            case "Switch":
                return ""; // Add link for Switch here
            case "ADXL345":
                return "https://adarc-help.mech.website/adxl345_topic.html#d38361e7520";
            case "MPU6050":
                return "https://adarc-help.mech.website/mpu6050_topic.html#d38361e8239";
            case "BNO-055":
                return "https://adarc-help.mech.website/bno055_code.html#d38361e8125";
            case "TF-Luna Lidar - I2C":
                return ""; // Add link for TF-Luna Lidar - I2C here
            case "TF-Luna Lidar - UART":
                return ""; // Add link for TF-Luna Lidar - UART here
            case "Ultrasonic":
                return ""; // Add link for Ultrasonic here
            case "IR Distance":
                return "https://adarc-help.mech.website/remoteControl.html#styler-id1.1.1.2.8.14.10.1";
            case "MQ-3":
                return "https://adarc-help.mech.website/mq3.html#styler-id1.1.1.2.8.11.7.1";
            case "SGP41":
                return "https://adarc-help.mech.website/sgp41.html#styler-id1.1.1.2.8.11.8.1";
            case "KY-018 LDR":
                return ""; // Add link for KY-018 LDR here
            case "Ambient Light":
                return "https://adarc-help.mech.website/ambientLight.html#styler-id1.1.1.2.8.12.9.1";
            case "Luminosity":
                return "https://adarc-help.mech.website/lightSensors.html#styler-id1.1.1.2.8.12.1";
            case "Alt - Ambient Light":
                return "https://adarc-help.mech.website/ambientLight.html#styler-id1.1.1.2.8.12.9.1";
            case "DHT11 / DHT22":
                return "https://adarc-help.mech.website/dht11.html#styler-id1.1.1.2.8.13.7.1";
            case "SHT31":
                return "https://adarc-help.mech.website/sht31.html#styler-id1.1.1.2.8.13.9.1";
            case "DS18B20":
                return "https://adarc-help.mech.website/ds18b20.html#styler-id1.1.1.2.8.13.8.1";
            case "Hall effect":
                return "https://adarc-help.mech.website/hallEffect.html#styler-id1.1.1.2.8.14.7.1";
            case "K-Thermocouple":
                return "https://adarc-help.mech.website/ThermoMax6675.html#styler-id1.1.1.2.8.14.9.1";
            case "PIR motion sensor":
                return "https://adarc-help.mech.website/pir.html#styler-id1.1.1.2.8.14.8.1";
            case "IR receiver":
                return "https://adarc-help.mech.website/remoteControl.html#styler-id1.1.1.2.8.14.10.1";
            case "SD Card Reader":
                return "https://adarc-help.mech.website/SD_CardReader.html#styler-id1.1.1.2.8.14.11.1";
            case "Load Cell(HX711)":
                return "https://adarc-help.mech.website/strainGaugeLoadCell.html#styler-id1.1.1.2.8.14.12.1";
            case "LED":
                return "https://adarc-help.mech.website/LED.html#styler-id1.1.1.2.8.7.9.1";
            case "7 - segment":
                return "https://adarc-help.mech.website/OLED.html#styler-id1.1.1.2.8.7.8.1";
            case "Bar":
                return "https://adarc-help.mech.website/ledBar.html#LEDBarGraphModules-4ABFAB6B";
            case "Matrix":
                return "https://adarc-help.mech.website/ledMatrix.html#LEDMatrix-4A2C438B";
            case "RGB":
                return "https://adarc-help.mech.website/rgdLed.html#RGBLEDModules-4A304018";
            case "RGB module":
                return "https://adarc-help.mech.website/rgdLed.html#RGBLEDModules-4A304018";
            case "Laser LED":
                return "https://adarc-help.mech.website/LED.html#styler-id1.1.1.2.8.7.9.1";
            case "LCD2004":
                return "https://adarc-help.mech.website/lcd2004.html#LCD2004Modules-49BD4324";
            case "LCD2004 - I2C":
                return "https://adarc-help.mech.website/lcd2004.html#LCD2004Modules-49BD4324";
            case "LCD1602":
                return "https://adarc-help.mech.website/lcd1602.html#LCDModule-493015CA";
            case "LCD1602 - I2C":
                return "https://adarc-help.mech.website/lcd1602.html#LCDModule-493015CA";
            case "SH1106 OLED - SPI":
                return "https://adarc-help.mech.website";
            case "SH1106 OLED - I2C":
                return "https://adarc-help.mech.website";
            case "Direct - SG90":
                return "https://adarc-help.mech.website/ServoMotors.html#styler-id1.1.1.2.9.7.1";
            case "Direct - DS-7001HV":
                return "https://adarc-help.mech.website/ServoMotors.html#styler-id1.1.1.2.9.7.1";
            case "Driver - SG90":
                return "https://adarc-help.mech.website/motorDrivers.html#styler-id1.1.1.2.9.12.1";
            case "Driver - DS-7001HV":
                return "https://adarc-help.mech.website/motorDrivers.html#styler-id1.1.1.2.9.12.1";
            case "Direct - Motor":
                return "https://adarc-help.mech.website/motors.html#styler-id1.1.1.2.9.1";
            case "Driver - Motor":
                return "https://adarc-help.mech.website/motorDrivers.html#styler-id1.1.1.2.9.12.1";
            case "Brushless ESC - Motor":
                return "https://adarc-help.mech.website/brushlessDcMotor_datasheet.html#styler-id1.1.1.2.9.10.8.1";
            case "28BYJ-48":
                return "https://adarc-help.mech.website/steppers_concept.html#styler-id1.1.1.2.9.9.1";
            case "Nema-17":
                return "https://adarc-help.mech.website/steppers_concept.html#styler-id1.1.1.2.9.9.1";
            case "Speaker":
                return ""; // Add link for Speaker here
            case "Buzzer":
                return ""; // Add link for Buzzer here
            case "Encoder":
                return ""; // Add link for Encoder here
            case "Voltage regulator":
                return ""; // Add link for Voltage regulator here
            case "Bluetooth Module":
                return "https://adarc-help.mech.website"; // Add link for Bluetooth Module here
            case "resistor":
                return ""; // Add link for resistor here
            case "stepper driver":
                return "https://adarc-help.mech.website/motorDrivers.html#styler-id1.1.1.2.9.12.1"; // Add link for stepper driver here
            default:
                return "https://adarc-help.mech.website"; // Default just in case it returns null
        }
    }


    void OpenLink(string url)
    {
        JsRuntime.InvokeVoidAsync("window.open", url, "_blank");
    }

}