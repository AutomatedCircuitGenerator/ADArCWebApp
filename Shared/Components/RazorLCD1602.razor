@code {

    public Dictionary<string, string> backgroundColors = new Dictionary<string, string>()
    {
        { "green", "#6cb201"},
        { "blue", "000eff"}
    };

    private double charXSpacing = 3.55;
    private double charYSpacing = 5.95;

    [Parameter]
    public string color { get; set; } = "black";
    [Parameter]
    public string background { get; set; } = "green";
    [Parameter]
    public byte[] characters { get; set; } = new byte[32];
    [Parameter]
    public byte[] font { get; set; } = LCDFontA00.Font;
    [Parameter]
    public bool cursor { get; set; } = false;
    [Parameter]
    public bool blink { get; set; } = false;
    [Parameter]
    public int cursorX { get; set; } = 0;
    [Parameter]
    public int cursorY { get; set; } = 0;
    [Parameter]
    public bool backlight { get; set; } = true;
    [Parameter]
    //limited to: "full" | "i2c" | "none"
    public string pins { get; set; } = "full";

    protected int numCols { get; } = 16;
    protected int numRows { get; } = 2;

    [Parameter]
    public string text {
        get
        {
            return new String(characters.Select(c => (char)c).ToArray());
        }
        set
        {
            //maybe wrong replacement
            this.characters = value.ToCharArray().Take(32).Select(c => (byte)c).ToArray();
        }
    }

    public static async void translate(ComponentInstance comp, long pinChangeCycle)
    {
        ComponentData data = comp.data;
        int enable = -1;
        if (0 == comp.getConnection("enable", out InstanceConnection? conn, out List<InstanceConnection>? all))
        {
            enable = conn!.toId;
        }


        if (await AvrCPU.getPinState(enable))         //TODO: change name if necess
        {

            if (comp.connMap.ContainsKey(data.pins["data5"]))
            {
                //assume 8pin setup
            }
            else
            {
                //assume 4pin setup, pin11,12,13,14 as DB4,5,6,7
                int p1 = -1, p2=-1, p3=-1, p4=-1, rs0=-1;
                if (0 == comp.getConnection("data1", out InstanceConnection? conn2, out List<InstanceConnection>? all2))
                {
                    p1 = conn2!.toId;
                }
                if (0 == comp.getConnection("data2", out InstanceConnection? conn3, out List<InstanceConnection>? all3))
                {
                    p2 = conn3!.toId;
                }
                if (0 == comp.getConnection("data3", out InstanceConnection? conn4, out List<InstanceConnection>? all4))
                {
                    p3 = conn4!.toId;
                }
                if (0 == comp.getConnection("data4", out InstanceConnection? conn5, out List<InstanceConnection>? all5))
                {
                    p4 = conn5!.toId;
                }
                if (0 == comp.getConnection("rs", out InstanceConnection? conn6, out List<InstanceConnection>? all6))
                {
                    rs0 = conn6!.toId;
                }
                bool a1 = await AvrCPU.getPinState(p1);
                bool a2 = await AvrCPU.getPinState(p2);
                bool a3 = await AvrCPU.getPinState(p3);
                bool a4 = await AvrCPU.getPinState(p4);
                bool rs = await AvrCPU.getPinState(rs0);
                if (comp.midSignal > 0)
                {
                    long sig = (a4 ? 1:0) | ((a3 ? 1:0) << 1) | ((a2 ? 1:0) << 2) | ((a1 ? 1:0) << 3);//may need to reverse sig
                    sig = sig << 4;
                    sig = sig | (long)comp.midSignal;

                    if (rs)
                    {
                        //r/w ram. cant be bothered right now.
                        //if ((sig))    
                    }
                    else
                    {
                        if ((sig & 1 << 7) > 0)
                        {
                            //set ddram addr?    
                        }
                        else if ((sig & 1 << 6) > 0)
                        {
                            //set cgram addr?
                        }
                        else if ((sig & 1 << 5) > 0)
                        {
                            //function set. probably from begin() or init()    
                        }
                        else if ((sig & 1 << 4) > 0)
                        {
                            //cursor shifting supposedly
                        }
                        else if ((sig & 1 << 3) > 0)
                        {
                            //display control    
                        }
                        else if ((sig & 1 << 2) > 0)
                        {
                            //entry mode set? auto shift cursor maybe?    
                        }
                        else if ((sig & 0b10) > 0)
                        {
                            //cursor display POSITION reset.    
                        }
                        else if ((sig & 1) > 0)
                        {
                            //clear text    
                        }
                        else
                        {
                            Console.WriteLine("Possible error: did not catch instruction: " + Convert.ToString(sig, 2));    
                        }
                    }

                    comp.midSignal = 0;
                }
                else
                {

                    int sig = (a4 ? 1:0) | ((a3 ? 1:0) << 1) | ((a2 ? 1:0) << 2) | ((a1 ? 1:0) << 3);
                    comp.midSignal = sig;
                }
            }
        }
    }

    private string genPath()
    {
        double xSpacing = 0.6;
        double ySpacing = 0.7;
        string[] result = new string[32];
        for (int i = 0; i < characters.Length; i++)
        {
            double charX = (i % numCols) * charXSpacing;
            double charY = Math.Floor(i / (double)numCols) * charYSpacing;

            for (int py = 0; py < 8; py++)
            {
                byte row = this.font[characters[i] * 8 + py];
                for (int px = 0; px < 5; px++)
                {
                    if ((row & (1 << px)) > 0)
                    {
                        double x = Math.Round(charX + px * xSpacing, 2);
                        double y = Math.Round(charY + py * ySpacing, 2);
                        result = result.Prepend("M " + x + " " + y + "h0.55v0.65h-0.55Z").ToArray();
                    }
                }
            }
        }
        return string.Join(" ", result);
    }

    double panelWidth { get { return numCols * 3.5125; } }

    double panelHeight { get { return numRows * 5.75; } }

    double width { get { return panelWidth + 23.8; } }

    double height { get { return panelHeight + 24.5; } }

    double darken { get { return backlight ? 0 : 0.5; } }

    string actualBgColor { get { return backgroundColors.Any(c => c.Equals(background)) ? backgroundColors[background] : backgroundColors["green"]; } }


    double xOffset { get { return 12.45 + cursorX * charXSpacing; } }
    double yOffset { get { return 12.55 + cursorY * charYSpacing; } }


    ElementPin[] pinInfo
    {
        get
        {
            double y = 87.5 + panelHeight * 3.78;
            // switch (pins) {
            //     case "i2c":
            //         return new ElementPin[]{
            //             new ElementPin( name: "GND", x: 4, y: 32, number: 1, signals: new PinSignalInfo[]{PinSignalInfo.GND() } ),
            //             new ElementPin( name: "VCC", x: 4, y: 41.5, number: 2, signals: new PinSignalInfo[]{ PinSignalInfo.VCC()} ),
            //             new ElementPin( name: "SDA", x: 4, y: 51, number: 3, signals: new PinSignalInfo[]{ PinSignalInfo.I2C(PinSignalInfo.PinSignal.SDA)} ),
            //             new ElementPin( name: "SCL", x: 4, y: 60.5, number: 4, signals: new PinSignalInfo[]{ PinSignalInfo.I2C(PinSignalInfo.PinSignal.SCL)} ),
            // };
            //     default:
                    return new ElementPin[]{
                        new ElementPin( name: "VSS", x: 32, y, number: 1, signals: new PinSignalInfo[]{PinSignalInfo.GND() } ),
                        new ElementPin( name: "VDD", x: 41.5, y, number: 2, signals: new PinSignalInfo[]{ PinSignalInfo.VCC()} ),
                        new ElementPin( name: "V0", x: 51.5, y, number: 3, signals: new PinSignalInfo[]{} ),
                        new ElementPin( name: "RS", x: 60.5, y, number: 4, signals: new PinSignalInfo[]{} ),
                        new ElementPin( name: "RW", x: 70.5, y, number: 5, signals: new PinSignalInfo[]{} ),
                        new ElementPin( name: "E", x: 80, y, number: 6, signals: new PinSignalInfo[]{} ),
                        new ElementPin( name: "D0", x: 89.5, y, number: 7, signals: new PinSignalInfo[]{} ),
                        new ElementPin( name: "D1", x: 99.5, y, number: 8, signals: new PinSignalInfo[]{} ),
                        new ElementPin( name: "D2", x: 109, y, number: 9, signals: new PinSignalInfo[]{} ),
                        new ElementPin( name: "D3", x: 118.5, y, number: 10, signals: new PinSignalInfo[]{} ),
                        new ElementPin( name: "D4", x: 128, y, number: 11, signals: new PinSignalInfo[]{} ),
                        new ElementPin( name: "D5", x: 137.5, y, number: 12, signals: new PinSignalInfo[]{} ),
                        new ElementPin( name: "D6", x: 147, y, number: 13, signals: new PinSignalInfo[]{} ),
                        new ElementPin( name: "D7", x: 156.5, y, number: 14, signals: new PinSignalInfo[]{} ),
                        new ElementPin( name: "A", x: 166.5, y, number: 15, signals: new PinSignalInfo[]{} ),
                        new ElementPin( name: "K", x: 176, y, number: 16, signals: new PinSignalInfo[]{} ),
                    };
            //} 
        }
    }


}

<svg
        width="@(width)mm"
        height="@(height)mm"
        version="1.1"
        viewBox="0 0 @(width) @(height)"
        style="font-size: 1.5px; font-family: monospace"
        xmlns="http://www.w3.org/2000/svg"
      >
        <defs>
          <pattern
            id="characters"
            width="3.55"
            height="5.95"
            patternUnits="userSpaceOnUse"
            x="12.45"
            y="12.55"
          >
            <rect width="2.95" height="5.55" fill-opacity="0.05" />
          </pattern>
          <pattern id="pins" width="2.54" height="3.255" patternUnits="userSpaceOnUse" y="1.1">
            <path
              fill="#92926d"
              d="M0,0.55c0,0 0.21,-0.52 0.87,-0.52 0.67,0 0.81,0.51 0.81,0.51v1.81h-1.869z"
            />
            <circle r="0.45" cx="0.827" cy="0.9" color="black" />
          </pattern>
        </defs>
        <rect width="@(width)" height="@(height)" fill="#087f45" />
        <rect x="4.95" y="5.7" width="@(panelWidth + 15)" height="@(panelHeight + 13.7)" />
        <rect
          x="7.55"
          y="10.3"
          width="@(panelWidth + 9.8)"
          height="@(panelHeight + 4.5)"
          rx="1.5"
          ry="1.5"
          fill="@(actualBgColor)"
        />
        <rect
          x="7.55"
          y="10.3"
          width="@(panelWidth + 9.8)"
          height="@(panelHeight + 4.5)"
          rx="1.5"
          ry="1.5"
          opacity="@(darken)"
        />
        @if (pins == "i2c"){
            @:<rect x="7.55" y="-2.5" height="2.5" width="10.16" fill="url(#pins)" transform="rotate(90)" />
            @:<text fill="white" font-size="1.5px" font-family= "monospace">
                <tspan y="6.8" x="0.7" fill="white">1</tspan>
                <tspan y="8.9" x="2.3" fill="white">GND</tspan>
                <tspan y="11.4" x="2.3" fill="white">VCC</tspan>
                <tspan y="14" x="2.3" fill="white">SDA</tspan>
                <tspan y="16.6" x="2.3" fill="white">SCL</tspan>
            @:</text>
        }
        @if (pins == "full")
        {
            double y = panelHeight + 21.1;

                <g transform="translate(0, @y)">
            <rect x="7.55" y="1" height="2.5" width="40.64" fill="url(#pins)" />
            <text fill="white" font-size="1.5px" font-family= "monospace">
              <tspan x="6" y="2.7">1</tspan>
              <tspan x="7.2" y="0.7">VSS</tspan>
              <tspan x="9.9" y="0.7">VDD</tspan>
              <tspan x="12.7" y="0.7">V0</tspan>
              <tspan x="15.2" y="0.7">RS</tspan>
              <tspan x="17.8" y="0.7">RW</tspan>
              <tspan x="20.8" y="0.7">E</tspan>
              <tspan x="22.7" y="0.7">D0</tspan>
              <tspan x="25.3" y="0.7">D1</tspan>
              <tspan x="27.9" y="0.7">D2</tspan>
              <tspan x="30.4" y="0.7">D3</tspan>
              <tspan x="33" y="0.7">D4</tspan>
              <tspan x="35.6" y="0.7">D5</tspan>
              <tspan x="38.2" y="0.7">D6</tspan>
              <tspan x="40.8" y="0.7">D7</tspan>
              <tspan x="43.6" y="0.7">A</tspan>
              <tspan x="46.2" y="0.7">K</tspan>
              <tspan x="48" y="2.7">16</tspan>
            </text>
          </g>
        }
        <rect
          x="12.45"
          y="12.55"
          width="@(panelWidth)"
          height="@(panelHeight)"
          fill="url(#characters)"
        />
        <path d="@genPath()" transform="translate(12.45, 12.55)" fill="@color" />

        @if(cursorX >= 0 && cursorX < numCols && cursorY >= 0 && cursorY < numRows){
            if (blink) {

                <rect x="@xOffset" y="@yOffset" width="2.95" height="5.55" fill="@color">
                    <animate attributeName="opacity" values="0;0;0;0;1;1;0;0;0;0" dur="1s" fill="freeze" repeatCount="indefinite"/>
                </rect>
        }

        if (cursor)
        {
            double y = yOffset + 0.7 * 7;
            <rect x="@xOffset" y="@y" width="2.95" height="0.65" fill="@color" />
        }
        }
      </svg>
