@using System.Text
@inherits RazorComponent

@code {

    public Dictionary<string, string> backgroundColors = new Dictionary<string, string>()
    {
        { "green", "#6cb201"},
        { "blue", "000eff"}
    };

    private double charXSpacing = 3.55;
    private double charYSpacing = 5.95;

    [Parameter]
    public string color { get; set; } = "black";
    [Parameter]
    public string background { get; set; } = "green";
    [Parameter]
    public byte[] characters { get; set; } = new byte[32];
    [Parameter]
    public byte[] font { get; set; } = LCDFontA00.Font;
    [Parameter]
    public bool cursor { get; set; } = false;
    [Parameter]
    public bool blink { get; set; } = false;
    [Parameter]
    public int cursorX { get; set; } = 0;
    [Parameter]
    public int cursorY { get; set; } = 0;
    [Parameter]
    public bool backlight { get; set; } = true;
    [Parameter]
    //limited to: "full" | "i2c" | "none"
    public string pins { get; set; } = "i2c";

    protected int numCols { get; } = 16;
    protected int numRows { get; } = 2;

    [Parameter]
    public string text {
        get
        {
            return new String(characters.Select(c => (char)c).ToArray());
        }
        set
        {
            //maybe wrong replacement
            this.characters = value.ToCharArray().Take(32).Select(c => (byte)c).ToArray();
        }
    }

    private string genPath()
    {
        double xSpacing = 0.6;
        double ySpacing = 0.7;
        string[] result = new string[32];
        for (int i = 0; i < characters.Length; i++)
        {
            double charX = (i % numCols) * charXSpacing;
            double charY = Math.Floor(i / (double)numCols) * charYSpacing;

            for (int py = 0; py < 8; py++)
            {
                byte row = this.font[characters[i] * 8 + py];
                for (int px = 0; px < 5; px++)
                {
                    if ((row & (1 << px)) > 0)
                    {
                        double x = Math.Round(charX + px * xSpacing, 2);
                        double y = Math.Round(charY + py * ySpacing, 2);
                        result = result.Prepend("M " + x + " " + y + "h0.55v0.65h-0.55Z").ToArray();
                    }
                }
            }
        }
        return string.Join(" ", result);
    }

    double panelWidth { get { return numCols * 3.5125; } }

    double panelHeight { get { return numRows * 5.75; } }

    double width { get { return panelWidth + 23.8; } }

    double height { get { return panelHeight + 24.5; } }

    double darken { get { return backlight ? 0 : 0.5; } }

    string actualBgColor { get { return backgroundColors.Any(c => c.Equals(background)) ? backgroundColors[background] : backgroundColors["green"]; } }


    double xOffset { get { return 12.45 + cursorX * charXSpacing; } }
    double yOffset { get { return 12.55 + cursorY * charYSpacing; } }
    
    public static ElementPin[] pinInfo
    {
        get
        {
            return new ElementPin[]{
                new ElementPin( name: "GND", x: 30, y: 57, number: 1, signals: new PinSignalInfo[]{ PinSignalInfo.GND() } ),
                new ElementPin( name: "VCC", x: 30, y: 66.5, number: 2, signals: new PinSignalInfo[]{ PinSignalInfo.VCC() } ),
                new ElementPin( name: "SDA", x: 30, y: 76, number: 3, signals: new PinSignalInfo[]{ PinSignalInfo.I2C(PinSignalInfo.PinSignal.SDA) } ),
                new ElementPin( name: "SCL", x: 30, y: 85.5, number: 4, signals: new PinSignalInfo[]{ PinSignalInfo.I2C(PinSignalInfo.PinSignal.SCL) } ),
            };
        }
    }

    [JSInvokable]
    public void Update(bool blinkOn, bool cursorOn, int addrMod64, int addrDiv64, byte[] characters, bool backlight, byte[] cgram, bool cgramUpdated)
    {
        if (!this.characters.SequenceEqual(characters))
        {
            ComponentInstance?.compParams["text"].setValue(System.Text.Encoding.UTF8.GetString(characters));
        } 
    }
}

<svg
        width="@(width)mm"
        height="@(height)mm"
        version="1.1"
        viewBox="0 0 @(width) @(height)"
        style="font-size: 1.5px; font-family: monospace"
        xmlns="http://www.w3.org/2000/svg"
      >
        <defs>
          <pattern
            id="characters"
            width="3.55"
            height="5.95"
            patternUnits="userSpaceOnUse"
            x="12.45"
            y="12.55"
          >
            <rect width="2.95" height="5.55" fill-opacity="0.05" />
          </pattern>
          <pattern id="pins" width="2.54" height="3.255" patternUnits="userSpaceOnUse" y="1.1">
            <path
              fill="#92926d"
              d="M0,0.55c0,0 0.21,-0.52 0.87,-0.52 0.67,0 0.81,0.51 0.81,0.51v1.81h-1.869z"
            />
            <circle r="0.45" cx="0.827" cy="0.9" color="black" />
          </pattern>
        </defs>
        <rect width="@(width)" height="@(height)" fill="#087f45" />
        <rect x="4.95" y="5.7" width="@(panelWidth + 15)" height="@(panelHeight + 13.7)" />
        <rect
          x="7.55"
          y="10.3"
          width="@(panelWidth + 9.8)"
          height="@(panelHeight + 4.5)"
          rx="1.5"
          ry="1.5"
          fill="@(actualBgColor)"
        />
        <rect
          x="7.55"
          y="10.3"
          width="@(panelWidth + 9.8)"
          height="@(panelHeight + 4.5)"
          rx="1.5"
          ry="1.5"
          opacity="@(darken)"
        />
        <rect x="7.55" y="-2.5" height="2.5" width="10.16" fill="url(#pins)" transform="rotate(90)" />
        <text fill="white" font-size="1.5px" font-family= "monospace">
            <tspan y="6.8" x="0.7" fill="white">1</tspan>
            <tspan y="8.9" x="2.3" fill="white">GND</tspan>
            <tspan y="11.4" x="2.3" fill="white">VCC</tspan>
            <tspan y="14" x="2.3" fill="white">SDA</tspan>
            <tspan y="16.6" x="2.3" fill="white">SCL</tspan>
        </text>
        <rect
          x="12.45"
          y="12.55"
          width="@(panelWidth)"
          height="@(panelHeight)"
          fill="url(#characters)"
        />
        <path d="@genPath()" transform="translate(12.45, 12.55)" fill="@color" />

        @if(cursorX >= 0 && cursorX < numCols && cursorY >= 0 && cursorY < numRows){
            if (blink) {

                <rect x="@xOffset" y="@yOffset" width="2.95" height="5.55" fill="@color">
                    <animate attributeName="opacity" values="0;0;0;0;1;1;0;0;0;0" dur="1s" fill="freeze" repeatCount="indefinite"/>
                </rect>
        }

        if (cursor)
        {
            double y = yOffset + 0.7 * 7;
            <rect x="@xOffset" y="@y" width="2.95" height="0.65" fill="@color" />
        }
        }
      </svg>
